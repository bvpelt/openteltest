{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ViewRegistry = /** @class */function () {\n  function ViewRegistry() {\n    this._registeredViews = [];\n  }\n  ViewRegistry.prototype.addView = function (view) {\n    this._registeredViews.push(view);\n  };\n  ViewRegistry.prototype.findViews = function (instrument, meter) {\n    var _this = this;\n    var views = this._registeredViews.filter(function (registeredView) {\n      return _this._matchInstrument(registeredView.instrumentSelector, instrument) && _this._matchMeter(registeredView.meterSelector, meter);\n    });\n    return views;\n  };\n  ViewRegistry.prototype._matchInstrument = function (selector, instrument) {\n    return (selector.getType() === undefined || instrument.type === selector.getType()) && selector.getNameFilter().match(instrument.name) && selector.getUnitFilter().match(instrument.unit);\n  };\n  ViewRegistry.prototype._matchMeter = function (selector, meter) {\n    return selector.getNameFilter().match(meter.name) && (meter.version === undefined || selector.getVersionFilter().match(meter.version)) && (meter.schemaUrl === undefined || selector.getSchemaUrlFilter().match(meter.schemaUrl));\n  };\n  return ViewRegistry;\n}();\nexport { ViewRegistry };","map":{"version":3,"names":["ViewRegistry","_registeredViews","prototype","addView","view","push","findViews","instrument","meter","_this","views","filter","registeredView","_matchInstrument","instrumentSelector","_matchMeter","meterSelector","selector","getType","undefined","type","getNameFilter","match","name","getUnitFilter","unit","version","getVersionFilter","schemaUrl","getSchemaUrlFilter"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/sdk-metrics/build/esm/view/ViewRegistry.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ViewRegistry = /** @class */ (function () {\n    function ViewRegistry() {\n        this._registeredViews = [];\n    }\n    ViewRegistry.prototype.addView = function (view) {\n        this._registeredViews.push(view);\n    };\n    ViewRegistry.prototype.findViews = function (instrument, meter) {\n        var _this = this;\n        var views = this._registeredViews.filter(function (registeredView) {\n            return (_this._matchInstrument(registeredView.instrumentSelector, instrument) &&\n                _this._matchMeter(registeredView.meterSelector, meter));\n        });\n        return views;\n    };\n    ViewRegistry.prototype._matchInstrument = function (selector, instrument) {\n        return ((selector.getType() === undefined ||\n            instrument.type === selector.getType()) &&\n            selector.getNameFilter().match(instrument.name) &&\n            selector.getUnitFilter().match(instrument.unit));\n    };\n    ViewRegistry.prototype._matchMeter = function (selector, meter) {\n        return (selector.getNameFilter().match(meter.name) &&\n            (meter.version === undefined ||\n                selector.getVersionFilter().match(meter.version)) &&\n            (meter.schemaUrl === undefined ||\n                selector.getSchemaUrlFilter().match(meter.schemaUrl)));\n    };\n    return ViewRegistry;\n}());\nexport { ViewRegistry };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAY,GAAG,aAAe,YAAY;EAC1C,SAASA,YAAYA,CAAA,EAAG;IACpB,IAAI,CAACC,gBAAgB,GAAG,EAAE;EAC9B;EACAD,YAAY,CAACE,SAAS,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAE;IAC7C,IAAI,CAACH,gBAAgB,CAACI,IAAI,CAACD,IAAI,CAAC;EACpC,CAAC;EACDJ,YAAY,CAACE,SAAS,CAACI,SAAS,GAAG,UAAUC,UAAU,EAAEC,KAAK,EAAE;IAC5D,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIC,KAAK,GAAG,IAAI,CAACT,gBAAgB,CAACU,MAAM,CAAC,UAAUC,cAAc,EAAE;MAC/D,OAAQH,KAAK,CAACI,gBAAgB,CAACD,cAAc,CAACE,kBAAkB,EAAEP,UAAU,CAAC,IACzEE,KAAK,CAACM,WAAW,CAACH,cAAc,CAACI,aAAa,EAAER,KAAK,CAAC;IAC9D,CAAC,CAAC;IACF,OAAOE,KAAK;EAChB,CAAC;EACDV,YAAY,CAACE,SAAS,CAACW,gBAAgB,GAAG,UAAUI,QAAQ,EAAEV,UAAU,EAAE;IACtE,OAAQ,CAACU,QAAQ,CAACC,OAAO,CAAC,CAAC,KAAKC,SAAS,IACrCZ,UAAU,CAACa,IAAI,KAAKH,QAAQ,CAACC,OAAO,CAAC,CAAC,KACtCD,QAAQ,CAACI,aAAa,CAAC,CAAC,CAACC,KAAK,CAACf,UAAU,CAACgB,IAAI,CAAC,IAC/CN,QAAQ,CAACO,aAAa,CAAC,CAAC,CAACF,KAAK,CAACf,UAAU,CAACkB,IAAI,CAAC;EACvD,CAAC;EACDzB,YAAY,CAACE,SAAS,CAACa,WAAW,GAAG,UAAUE,QAAQ,EAAET,KAAK,EAAE;IAC5D,OAAQS,QAAQ,CAACI,aAAa,CAAC,CAAC,CAACC,KAAK,CAACd,KAAK,CAACe,IAAI,CAAC,KAC7Cf,KAAK,CAACkB,OAAO,KAAKP,SAAS,IACxBF,QAAQ,CAACU,gBAAgB,CAAC,CAAC,CAACL,KAAK,CAACd,KAAK,CAACkB,OAAO,CAAC,CAAC,KACpDlB,KAAK,CAACoB,SAAS,KAAKT,SAAS,IAC1BF,QAAQ,CAACY,kBAAkB,CAAC,CAAC,CAACP,KAAK,CAACd,KAAK,CAACoB,SAAS,CAAC,CAAC;EACjE,CAAC;EACD,OAAO5B,YAAY;AACvB,CAAC,CAAC,CAAE;AACJ,SAASA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}