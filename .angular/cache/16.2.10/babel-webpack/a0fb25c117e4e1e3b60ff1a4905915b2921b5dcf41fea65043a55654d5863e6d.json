{"ast":null,"code":"// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar util = require('util');\nvar assert = require('assert');\nvar ThriftList = require('./list').ThriftList;\nvar TYPE = require('./TYPE');\nfunction ThriftSet(valueType, annotations) {\n  ThriftList.call(this, valueType, annotations);\n  this.mode = annotations && annotations['js.type'] || 'array';\n  this.form = null;\n  this.surface = null;\n  if (this.mode === 'object') {\n    if (valueType.name === 'string') {\n      this.rw.form = this.objectStringForm;\n      // istanbul ignore else\n    } else if (valueType.name === 'byte' || valueType.name === 'i16' || valueType.name === 'i32') {\n      this.rw.form = this.objectNumberForm;\n    } else {\n      assert.fail('sets with js.type of \\'object\\' must have a value type ' + 'of \\'string\\', \\'byte\\', \\'i16\\', or \\'i32\\'');\n    }\n    this.surface = Object;\n    // istanbul ignore else\n  } else if (this.mode === 'array') {\n    this.rw.form = this.arrayForm;\n    this.surface = Array;\n  } else {\n    assert.fail('set must have js.type of object or array (default)');\n  }\n  this.annotations = annotations;\n}\nutil.inherits(ThriftSet, ThriftList);\nThriftSet.prototype.name = 'set';\nThriftSet.prototype.typeid = TYPE.SET;\n// Lists are indistinguishable on the wire apart from the typeid.\n// A prior version of thriftrw was writing sets with the list typeid.\n// Allowing an alternate typeid eases migration temporarily.\nThriftSet.prototype.altTypeid = TYPE.LIST;\nThriftSet.prototype.models = 'type';\nThriftSet.prototype.arrayForm = {\n  create: function create() {\n    return [];\n  },\n  add: function add(values, value) {\n    values.push(value);\n  },\n  toArray: function toArray(values) {\n    assert(Array.isArray(values), 'set must be expressed as an array');\n    return values;\n  }\n};\nThriftSet.prototype.objectNumberForm = {\n  create: function create() {\n    return {};\n  },\n  add: function add(values, value) {\n    values[value] = true;\n  },\n  toArray: function toArray(object) {\n    assert(object && typeof object === 'object', 'set must be expressed as an object');\n    var keys = Object.keys(object);\n    var values = [];\n    for (var index = 0; index < keys.length; index++) {\n      // istanbul ignore else\n      if (object[keys[index]]) {\n        values.push(+keys[index]);\n      }\n    }\n    return values;\n  }\n};\nThriftSet.prototype.objectStringForm = {\n  create: function create() {\n    return {};\n  },\n  add: function add(values, value) {\n    values[value] = true;\n  },\n  toArray: function toArray(object) {\n    assert(object && typeof object === 'object', 'set must be expressed as an object');\n    var keys = Object.keys(object);\n    var values = [];\n    for (var index = 0; index < keys.length; index++) {\n      // istanbul ignore else\n      if (object[keys[index]]) {\n        values.push(keys[index]);\n      }\n    }\n    return values;\n  }\n};\nmodule.exports.ThriftSet = ThriftSet;","map":{"version":3,"names":["util","require","assert","ThriftList","TYPE","ThriftSet","valueType","annotations","call","mode","form","surface","name","rw","objectStringForm","objectNumberForm","fail","Object","arrayForm","Array","inherits","prototype","typeid","SET","altTypeid","LIST","models","create","add","values","value","push","toArray","isArray","object","keys","index","length","module","exports"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/thriftrw/set.js"],"sourcesContent":["// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar util = require('util');\nvar assert = require('assert');\nvar ThriftList = require('./list').ThriftList;\nvar TYPE = require('./TYPE');\n\nfunction ThriftSet(valueType, annotations) {\n    ThriftList.call(this, valueType, annotations);\n    this.mode = annotations && annotations['js.type'] || 'array';\n    this.form = null;\n    this.surface = null;\n    if (this.mode === 'object') {\n        if (valueType.name === 'string') {\n            this.rw.form = this.objectStringForm;\n        // istanbul ignore else\n        } else if (\n            valueType.name === 'byte' ||\n            valueType.name === 'i16' ||\n            valueType.name === 'i32'\n        ) {\n            this.rw.form = this.objectNumberForm;\n        } else {\n            assert.fail('sets with js.type of \\'object\\' must have a value type ' +\n                'of \\'string\\', \\'byte\\', \\'i16\\', or \\'i32\\'');\n        }\n        this.surface = Object;\n    // istanbul ignore else\n    } else if (this.mode === 'array') {\n        this.rw.form = this.arrayForm;\n        this.surface = Array;\n    } else {\n        assert.fail('set must have js.type of object or array (default)');\n    }\n    this.annotations = annotations;\n}\n\nutil.inherits(ThriftSet, ThriftList);\n\nThriftSet.prototype.name = 'set';\nThriftSet.prototype.typeid = TYPE.SET;\n// Lists are indistinguishable on the wire apart from the typeid.\n// A prior version of thriftrw was writing sets with the list typeid.\n// Allowing an alternate typeid eases migration temporarily.\nThriftSet.prototype.altTypeid = TYPE.LIST;\nThriftSet.prototype.models = 'type';\n\nThriftSet.prototype.arrayForm = {\n    create: function create() {\n        return [];\n    },\n    add: function add(values, value) {\n        values.push(value);\n    },\n    toArray: function toArray(values) {\n        assert(Array.isArray(values), 'set must be expressed as an array');\n        return values;\n    }\n};\n\nThriftSet.prototype.objectNumberForm = {\n    create: function create() {\n        return {};\n    },\n    add: function add(values, value) {\n        values[value] = true;\n    },\n    toArray: function toArray(object) {\n        assert(object && typeof object === 'object', 'set must be expressed as an object');\n        var keys = Object.keys(object);\n        var values = [];\n        for (var index = 0; index < keys.length; index++) {\n            // istanbul ignore else\n            if (object[keys[index]]) {\n                values.push(+keys[index]);\n            }\n        }\n        return values;\n    }\n};\n\nThriftSet.prototype.objectStringForm = {\n    create: function create() {\n        return {};\n    },\n    add: function add(values, value) {\n        values[value] = true;\n    },\n    toArray: function toArray(object) {\n        assert(object && typeof object === 'object', 'set must be expressed as an object');\n        var keys = Object.keys(object);\n        var values = [];\n        for (var index = 0; index < keys.length; index++) {\n            // istanbul ignore else\n            if (object[keys[index]]) {\n                values.push(keys[index]);\n            }\n        }\n        return values;\n    }\n};\n\nmodule.exports.ThriftSet = ThriftSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}