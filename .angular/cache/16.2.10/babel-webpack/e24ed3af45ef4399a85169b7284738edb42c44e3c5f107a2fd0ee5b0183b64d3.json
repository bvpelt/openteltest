{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as api from '@opentelemetry/api';\nimport { SumAggregator, DropAggregator, LastValueAggregator, HistogramAggregator, ExponentialHistogramAggregator } from '../aggregator';\nimport { InstrumentType } from '../InstrumentDescriptor';\n/**\n * Configures how measurements are combined into metrics for views.\n *\n * Aggregation provides a set of built-in aggregations via static methods.\n */\nvar Aggregation = /** @class */function () {\n  function Aggregation() {}\n  Aggregation.Drop = function () {\n    return DROP_AGGREGATION;\n  };\n  Aggregation.Sum = function () {\n    return SUM_AGGREGATION;\n  };\n  Aggregation.LastValue = function () {\n    return LAST_VALUE_AGGREGATION;\n  };\n  Aggregation.Histogram = function () {\n    return HISTOGRAM_AGGREGATION;\n  };\n  Aggregation.ExponentialHistogram = function () {\n    return EXPONENTIAL_HISTOGRAM_AGGREGATION;\n  };\n  Aggregation.Default = function () {\n    return DEFAULT_AGGREGATION;\n  };\n  return Aggregation;\n}();\nexport { Aggregation };\n/**\n * The default drop aggregation.\n */\nvar DropAggregation = /** @class */function (_super) {\n  __extends(DropAggregation, _super);\n  function DropAggregation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DropAggregation.prototype.createAggregator = function (_instrument) {\n    return DropAggregation.DEFAULT_INSTANCE;\n  };\n  DropAggregation.DEFAULT_INSTANCE = new DropAggregator();\n  return DropAggregation;\n}(Aggregation);\nexport { DropAggregation };\n/**\n * The default sum aggregation.\n */\nvar SumAggregation = /** @class */function (_super) {\n  __extends(SumAggregation, _super);\n  function SumAggregation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SumAggregation.prototype.createAggregator = function (instrument) {\n    switch (instrument.type) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.HISTOGRAM:\n        {\n          return SumAggregation.MONOTONIC_INSTANCE;\n        }\n      default:\n        {\n          return SumAggregation.NON_MONOTONIC_INSTANCE;\n        }\n    }\n  };\n  SumAggregation.MONOTONIC_INSTANCE = new SumAggregator(true);\n  SumAggregation.NON_MONOTONIC_INSTANCE = new SumAggregator(false);\n  return SumAggregation;\n}(Aggregation);\nexport { SumAggregation };\n/**\n * The default last value aggregation.\n */\nvar LastValueAggregation = /** @class */function (_super) {\n  __extends(LastValueAggregation, _super);\n  function LastValueAggregation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  LastValueAggregation.prototype.createAggregator = function (_instrument) {\n    return LastValueAggregation.DEFAULT_INSTANCE;\n  };\n  LastValueAggregation.DEFAULT_INSTANCE = new LastValueAggregator();\n  return LastValueAggregation;\n}(Aggregation);\nexport { LastValueAggregation };\n/**\n * The default histogram aggregation.\n */\nvar HistogramAggregation = /** @class */function (_super) {\n  __extends(HistogramAggregation, _super);\n  function HistogramAggregation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  HistogramAggregation.prototype.createAggregator = function (_instrument) {\n    return HistogramAggregation.DEFAULT_INSTANCE;\n  };\n  HistogramAggregation.DEFAULT_INSTANCE = new HistogramAggregator([0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000], true);\n  return HistogramAggregation;\n}(Aggregation);\nexport { HistogramAggregation };\n/**\n * The explicit bucket histogram aggregation.\n */\nvar ExplicitBucketHistogramAggregation = /** @class */function (_super) {\n  __extends(ExplicitBucketHistogramAggregation, _super);\n  /**\n   * @param boundaries the bucket boundaries of the histogram aggregation\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  function ExplicitBucketHistogramAggregation(boundaries, _recordMinMax) {\n    if (_recordMinMax === void 0) {\n      _recordMinMax = true;\n    }\n    var _this = _super.call(this) || this;\n    _this._recordMinMax = _recordMinMax;\n    if (boundaries === undefined || boundaries.length === 0) {\n      throw new Error('HistogramAggregator should be created with boundaries.');\n    }\n    // Copy the boundaries array for modification.\n    boundaries = boundaries.concat();\n    // We need to an ordered set to be able to correctly compute count for each\n    // boundary since we'll iterate on each in order.\n    boundaries = boundaries.sort(function (a, b) {\n      return a - b;\n    });\n    // Remove all Infinity from the boundaries.\n    var minusInfinityIndex = boundaries.lastIndexOf(-Infinity);\n    var infinityIndex = boundaries.indexOf(Infinity);\n    if (infinityIndex === -1) {\n      infinityIndex = undefined;\n    }\n    _this._boundaries = boundaries.slice(minusInfinityIndex + 1, infinityIndex);\n    return _this;\n  }\n  ExplicitBucketHistogramAggregation.prototype.createAggregator = function (_instrument) {\n    return new HistogramAggregator(this._boundaries, this._recordMinMax);\n  };\n  return ExplicitBucketHistogramAggregation;\n}(Aggregation);\nexport { ExplicitBucketHistogramAggregation };\nvar ExponentialHistogramAggregation = /** @class */function (_super) {\n  __extends(ExponentialHistogramAggregation, _super);\n  function ExponentialHistogramAggregation(_maxSize, _recordMinMax) {\n    if (_maxSize === void 0) {\n      _maxSize = 160;\n    }\n    if (_recordMinMax === void 0) {\n      _recordMinMax = true;\n    }\n    var _this = _super.call(this) || this;\n    _this._maxSize = _maxSize;\n    _this._recordMinMax = _recordMinMax;\n    return _this;\n  }\n  ExponentialHistogramAggregation.prototype.createAggregator = function (_instrument) {\n    return new ExponentialHistogramAggregator(this._maxSize, this._recordMinMax);\n  };\n  return ExponentialHistogramAggregation;\n}(Aggregation);\nexport { ExponentialHistogramAggregation };\n/**\n * The default aggregation.\n */\nvar DefaultAggregation = /** @class */function (_super) {\n  __extends(DefaultAggregation, _super);\n  function DefaultAggregation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DefaultAggregation.prototype._resolve = function (instrument) {\n    // cast to unknown to disable complaints on the (unreachable) fallback.\n    switch (instrument.type) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.UP_DOWN_COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER:\n        {\n          return SUM_AGGREGATION;\n        }\n      case InstrumentType.OBSERVABLE_GAUGE:\n        {\n          return LAST_VALUE_AGGREGATION;\n        }\n      case InstrumentType.HISTOGRAM:\n        {\n          if (instrument.advice.explicitBucketBoundaries) {\n            return new ExplicitBucketHistogramAggregation(instrument.advice.explicitBucketBoundaries);\n          }\n          return HISTOGRAM_AGGREGATION;\n        }\n    }\n    api.diag.warn(\"Unable to recognize instrument type: \" + instrument.type);\n    return DROP_AGGREGATION;\n  };\n  DefaultAggregation.prototype.createAggregator = function (instrument) {\n    return this._resolve(instrument).createAggregator(instrument);\n  };\n  return DefaultAggregation;\n}(Aggregation);\nexport { DefaultAggregation };\nvar DROP_AGGREGATION = new DropAggregation();\nvar SUM_AGGREGATION = new SumAggregation();\nvar LAST_VALUE_AGGREGATION = new LastValueAggregation();\nvar HISTOGRAM_AGGREGATION = new HistogramAggregation();\nvar EXPONENTIAL_HISTOGRAM_AGGREGATION = new ExponentialHistogramAggregation();\nvar DEFAULT_AGGREGATION = new DefaultAggregation();","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","api","SumAggregator","DropAggregator","LastValueAggregator","HistogramAggregator","ExponentialHistogramAggregator","InstrumentType","Aggregation","Drop","DROP_AGGREGATION","Sum","SUM_AGGREGATION","LastValue","LAST_VALUE_AGGREGATION","Histogram","HISTOGRAM_AGGREGATION","ExponentialHistogram","EXPONENTIAL_HISTOGRAM_AGGREGATION","Default","DEFAULT_AGGREGATION","DropAggregation","_super","apply","arguments","createAggregator","_instrument","DEFAULT_INSTANCE","SumAggregation","instrument","type","COUNTER","OBSERVABLE_COUNTER","HISTOGRAM","MONOTONIC_INSTANCE","NON_MONOTONIC_INSTANCE","LastValueAggregation","HistogramAggregation","ExplicitBucketHistogramAggregation","boundaries","_recordMinMax","_this","undefined","length","Error","concat","sort","a","minusInfinityIndex","lastIndexOf","Infinity","infinityIndex","indexOf","_boundaries","slice","ExponentialHistogramAggregation","_maxSize","DefaultAggregation","_resolve","UP_DOWN_COUNTER","OBSERVABLE_UP_DOWN_COUNTER","OBSERVABLE_GAUGE","advice","explicitBucketBoundaries","diag","warn"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/sdk-metrics/build/esm/view/Aggregation.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as api from '@opentelemetry/api';\nimport { SumAggregator, DropAggregator, LastValueAggregator, HistogramAggregator, ExponentialHistogramAggregator, } from '../aggregator';\nimport { InstrumentType } from '../InstrumentDescriptor';\n/**\n * Configures how measurements are combined into metrics for views.\n *\n * Aggregation provides a set of built-in aggregations via static methods.\n */\nvar Aggregation = /** @class */ (function () {\n    function Aggregation() {\n    }\n    Aggregation.Drop = function () {\n        return DROP_AGGREGATION;\n    };\n    Aggregation.Sum = function () {\n        return SUM_AGGREGATION;\n    };\n    Aggregation.LastValue = function () {\n        return LAST_VALUE_AGGREGATION;\n    };\n    Aggregation.Histogram = function () {\n        return HISTOGRAM_AGGREGATION;\n    };\n    Aggregation.ExponentialHistogram = function () {\n        return EXPONENTIAL_HISTOGRAM_AGGREGATION;\n    };\n    Aggregation.Default = function () {\n        return DEFAULT_AGGREGATION;\n    };\n    return Aggregation;\n}());\nexport { Aggregation };\n/**\n * The default drop aggregation.\n */\nvar DropAggregation = /** @class */ (function (_super) {\n    __extends(DropAggregation, _super);\n    function DropAggregation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DropAggregation.prototype.createAggregator = function (_instrument) {\n        return DropAggregation.DEFAULT_INSTANCE;\n    };\n    DropAggregation.DEFAULT_INSTANCE = new DropAggregator();\n    return DropAggregation;\n}(Aggregation));\nexport { DropAggregation };\n/**\n * The default sum aggregation.\n */\nvar SumAggregation = /** @class */ (function (_super) {\n    __extends(SumAggregation, _super);\n    function SumAggregation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SumAggregation.prototype.createAggregator = function (instrument) {\n        switch (instrument.type) {\n            case InstrumentType.COUNTER:\n            case InstrumentType.OBSERVABLE_COUNTER:\n            case InstrumentType.HISTOGRAM: {\n                return SumAggregation.MONOTONIC_INSTANCE;\n            }\n            default: {\n                return SumAggregation.NON_MONOTONIC_INSTANCE;\n            }\n        }\n    };\n    SumAggregation.MONOTONIC_INSTANCE = new SumAggregator(true);\n    SumAggregation.NON_MONOTONIC_INSTANCE = new SumAggregator(false);\n    return SumAggregation;\n}(Aggregation));\nexport { SumAggregation };\n/**\n * The default last value aggregation.\n */\nvar LastValueAggregation = /** @class */ (function (_super) {\n    __extends(LastValueAggregation, _super);\n    function LastValueAggregation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LastValueAggregation.prototype.createAggregator = function (_instrument) {\n        return LastValueAggregation.DEFAULT_INSTANCE;\n    };\n    LastValueAggregation.DEFAULT_INSTANCE = new LastValueAggregator();\n    return LastValueAggregation;\n}(Aggregation));\nexport { LastValueAggregation };\n/**\n * The default histogram aggregation.\n */\nvar HistogramAggregation = /** @class */ (function (_super) {\n    __extends(HistogramAggregation, _super);\n    function HistogramAggregation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    HistogramAggregation.prototype.createAggregator = function (_instrument) {\n        return HistogramAggregation.DEFAULT_INSTANCE;\n    };\n    HistogramAggregation.DEFAULT_INSTANCE = new HistogramAggregator([0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000], true);\n    return HistogramAggregation;\n}(Aggregation));\nexport { HistogramAggregation };\n/**\n * The explicit bucket histogram aggregation.\n */\nvar ExplicitBucketHistogramAggregation = /** @class */ (function (_super) {\n    __extends(ExplicitBucketHistogramAggregation, _super);\n    /**\n     * @param boundaries the bucket boundaries of the histogram aggregation\n     * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n     */\n    function ExplicitBucketHistogramAggregation(boundaries, _recordMinMax) {\n        if (_recordMinMax === void 0) { _recordMinMax = true; }\n        var _this = _super.call(this) || this;\n        _this._recordMinMax = _recordMinMax;\n        if (boundaries === undefined || boundaries.length === 0) {\n            throw new Error('HistogramAggregator should be created with boundaries.');\n        }\n        // Copy the boundaries array for modification.\n        boundaries = boundaries.concat();\n        // We need to an ordered set to be able to correctly compute count for each\n        // boundary since we'll iterate on each in order.\n        boundaries = boundaries.sort(function (a, b) { return a - b; });\n        // Remove all Infinity from the boundaries.\n        var minusInfinityIndex = boundaries.lastIndexOf(-Infinity);\n        var infinityIndex = boundaries.indexOf(Infinity);\n        if (infinityIndex === -1) {\n            infinityIndex = undefined;\n        }\n        _this._boundaries = boundaries.slice(minusInfinityIndex + 1, infinityIndex);\n        return _this;\n    }\n    ExplicitBucketHistogramAggregation.prototype.createAggregator = function (_instrument) {\n        return new HistogramAggregator(this._boundaries, this._recordMinMax);\n    };\n    return ExplicitBucketHistogramAggregation;\n}(Aggregation));\nexport { ExplicitBucketHistogramAggregation };\nvar ExponentialHistogramAggregation = /** @class */ (function (_super) {\n    __extends(ExponentialHistogramAggregation, _super);\n    function ExponentialHistogramAggregation(_maxSize, _recordMinMax) {\n        if (_maxSize === void 0) { _maxSize = 160; }\n        if (_recordMinMax === void 0) { _recordMinMax = true; }\n        var _this = _super.call(this) || this;\n        _this._maxSize = _maxSize;\n        _this._recordMinMax = _recordMinMax;\n        return _this;\n    }\n    ExponentialHistogramAggregation.prototype.createAggregator = function (_instrument) {\n        return new ExponentialHistogramAggregator(this._maxSize, this._recordMinMax);\n    };\n    return ExponentialHistogramAggregation;\n}(Aggregation));\nexport { ExponentialHistogramAggregation };\n/**\n * The default aggregation.\n */\nvar DefaultAggregation = /** @class */ (function (_super) {\n    __extends(DefaultAggregation, _super);\n    function DefaultAggregation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DefaultAggregation.prototype._resolve = function (instrument) {\n        // cast to unknown to disable complaints on the (unreachable) fallback.\n        switch (instrument.type) {\n            case InstrumentType.COUNTER:\n            case InstrumentType.UP_DOWN_COUNTER:\n            case InstrumentType.OBSERVABLE_COUNTER:\n            case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER: {\n                return SUM_AGGREGATION;\n            }\n            case InstrumentType.OBSERVABLE_GAUGE: {\n                return LAST_VALUE_AGGREGATION;\n            }\n            case InstrumentType.HISTOGRAM: {\n                if (instrument.advice.explicitBucketBoundaries) {\n                    return new ExplicitBucketHistogramAggregation(instrument.advice.explicitBucketBoundaries);\n                }\n                return HISTOGRAM_AGGREGATION;\n            }\n        }\n        api.diag.warn(\"Unable to recognize instrument type: \" + instrument.type);\n        return DROP_AGGREGATION;\n    };\n    DefaultAggregation.prototype.createAggregator = function (instrument) {\n        return this._resolve(instrument).createAggregator(instrument);\n    };\n    return DefaultAggregation;\n}(Aggregation));\nexport { DefaultAggregation };\nvar DROP_AGGREGATION = new DropAggregation();\nvar SUM_AGGREGATION = new SumAggregation();\nvar LAST_VALUE_AGGREGATION = new LastValueAggregation();\nvar HISTOGRAM_AGGREGATION = new HistogramAggregation();\nvar EXPONENTIAL_HISTOGRAM_AGGREGATION = new ExponentialHistogramAggregation();\nvar DEFAULT_AGGREGATION = new DefaultAggregation();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}