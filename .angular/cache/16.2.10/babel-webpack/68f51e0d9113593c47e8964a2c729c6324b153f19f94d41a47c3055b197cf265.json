{"ast":null,"code":"'use strict';\n\nvar template = require('string-template');\nvar extend = require('xtend/mutable');\nvar assert = require('assert');\nvar isWordBoundary = /[_.-](\\w|$)/g;\nmodule.exports = TypedError;\nfunction TypedError(args) {\n  assert(args, 'TypedError: must specify options');\n  assert(args.type, 'TypedError: must specify options.type');\n  assert(args.message, 'TypedError: must specify options.message');\n  assert(!has(args, 'fullType'), 'TypedError: fullType field is reserved');\n  var message = args.message;\n  if (args.type && !args.name) {\n    var errorName = camelCase(args.type) + 'Error';\n    args.name = errorName[0].toUpperCase() + errorName.substr(1);\n  }\n  extend(createError, args);\n  createError._name = args.name;\n  return createError;\n  function createError(opts) {\n    var result = new Error();\n    Object.defineProperty(result, 'type', {\n      value: result.type,\n      enumerable: true,\n      writable: true,\n      configurable: true\n    });\n    var options = extend({}, args, opts);\n    if (!options.fullType) {\n      options.fullType = options.type;\n    }\n    extend(result, options);\n    if (opts && opts.message) {\n      result.message = template(opts.message, options);\n    } else if (message) {\n      result.message = template(message, options);\n    }\n    return result;\n  }\n}\nfunction camelCase(str) {\n  return str.replace(isWordBoundary, upperCase);\n}\nfunction upperCase(_, x) {\n  return x.toUpperCase();\n}\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}","map":{"version":3,"names":["template","require","extend","assert","isWordBoundary","module","exports","TypedError","args","type","message","has","name","errorName","camelCase","toUpperCase","substr","createError","_name","opts","result","Error","Object","defineProperty","value","enumerable","writable","configurable","options","fullType","str","replace","upperCase","_","x","obj","key","prototype","hasOwnProperty","call"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/error/typed.js"],"sourcesContent":["'use strict';\n\nvar template = require('string-template');\nvar extend = require('xtend/mutable');\nvar assert = require('assert');\n\nvar isWordBoundary = /[_.-](\\w|$)/g;\n\nmodule.exports = TypedError;\n\nfunction TypedError(args) {\n    assert(args, 'TypedError: must specify options');\n    assert(args.type, 'TypedError: must specify options.type');\n    assert(args.message, 'TypedError: must specify options.message');\n\n    assert(!has(args, 'fullType'),\n        'TypedError: fullType field is reserved');\n\n    var message = args.message;\n    if (args.type && !args.name) {\n        var errorName = camelCase(args.type) + 'Error';\n        args.name = errorName[0].toUpperCase() + errorName.substr(1);\n    }\n\n    extend(createError, args);\n    createError._name = args.name;\n\n    return createError;\n\n    function createError(opts) {\n        var result = new Error();\n\n        Object.defineProperty(result, 'type', {\n            value: result.type,\n            enumerable: true,\n            writable: true,\n            configurable: true\n        });\n\n        var options = extend({}, args, opts);\n        if (!options.fullType) {\n            options.fullType = options.type;\n        }\n\n        extend(result, options);\n        if (opts && opts.message) {\n            result.message = template(opts.message, options);\n        } else if (message) {\n            result.message = template(message, options);\n        }\n\n        return result;\n    }\n}\n\nfunction camelCase(str) {\n    return str.replace(isWordBoundary, upperCase);\n}\n\nfunction upperCase(_, x) {\n    return x.toUpperCase();\n}\n\nfunction has(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACzC,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAe,CAAC;AACrC,IAAIE,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAE9B,IAAIG,cAAc,GAAG,cAAc;AAEnCC,MAAM,CAACC,OAAO,GAAGC,UAAU;AAE3B,SAASA,UAAUA,CAACC,IAAI,EAAE;EACtBL,MAAM,CAACK,IAAI,EAAE,kCAAkC,CAAC;EAChDL,MAAM,CAACK,IAAI,CAACC,IAAI,EAAE,uCAAuC,CAAC;EAC1DN,MAAM,CAACK,IAAI,CAACE,OAAO,EAAE,0CAA0C,CAAC;EAEhEP,MAAM,CAAC,CAACQ,GAAG,CAACH,IAAI,EAAE,UAAU,CAAC,EACzB,wCAAwC,CAAC;EAE7C,IAAIE,OAAO,GAAGF,IAAI,CAACE,OAAO;EAC1B,IAAIF,IAAI,CAACC,IAAI,IAAI,CAACD,IAAI,CAACI,IAAI,EAAE;IACzB,IAAIC,SAAS,GAAGC,SAAS,CAACN,IAAI,CAACC,IAAI,CAAC,GAAG,OAAO;IAC9CD,IAAI,CAACI,IAAI,GAAGC,SAAS,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,GAAGF,SAAS,CAACG,MAAM,CAAC,CAAC,CAAC;EAChE;EAEAd,MAAM,CAACe,WAAW,EAAET,IAAI,CAAC;EACzBS,WAAW,CAACC,KAAK,GAAGV,IAAI,CAACI,IAAI;EAE7B,OAAOK,WAAW;EAElB,SAASA,WAAWA,CAACE,IAAI,EAAE;IACvB,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAAC,CAAC;IAExBC,MAAM,CAACC,cAAc,CAACH,MAAM,EAAE,MAAM,EAAE;MAClCI,KAAK,EAAEJ,MAAM,CAACX,IAAI;MAClBgB,UAAU,EAAE,IAAI;MAChBC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;IAClB,CAAC,CAAC;IAEF,IAAIC,OAAO,GAAG1B,MAAM,CAAC,CAAC,CAAC,EAAEM,IAAI,EAAEW,IAAI,CAAC;IACpC,IAAI,CAACS,OAAO,CAACC,QAAQ,EAAE;MACnBD,OAAO,CAACC,QAAQ,GAAGD,OAAO,CAACnB,IAAI;IACnC;IAEAP,MAAM,CAACkB,MAAM,EAAEQ,OAAO,CAAC;IACvB,IAAIT,IAAI,IAAIA,IAAI,CAACT,OAAO,EAAE;MACtBU,MAAM,CAACV,OAAO,GAAGV,QAAQ,CAACmB,IAAI,CAACT,OAAO,EAAEkB,OAAO,CAAC;IACpD,CAAC,MAAM,IAAIlB,OAAO,EAAE;MAChBU,MAAM,CAACV,OAAO,GAAGV,QAAQ,CAACU,OAAO,EAAEkB,OAAO,CAAC;IAC/C;IAEA,OAAOR,MAAM;EACjB;AACJ;AAEA,SAASN,SAASA,CAACgB,GAAG,EAAE;EACpB,OAAOA,GAAG,CAACC,OAAO,CAAC3B,cAAc,EAAE4B,SAAS,CAAC;AACjD;AAEA,SAASA,SAASA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACrB,OAAOA,CAAC,CAACnB,WAAW,CAAC,CAAC;AAC1B;AAEA,SAASJ,GAAGA,CAACwB,GAAG,EAAEC,GAAG,EAAE;EACnB,OAAOd,MAAM,CAACe,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,GAAG,EAAEC,GAAG,CAAC;AACzD"},"metadata":{},"sourceType":"script","externalDependencies":[]}