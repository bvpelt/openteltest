{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nvar _dgram = require('dgram');\nvar _dgram2 = _interopRequireDefault(_dgram);\nvar _fs = require('fs');\nvar _fs2 = _interopRequireDefault(_fs);\nvar _path = require('path');\nvar _path2 = _interopRequireDefault(_path);\nvar _thriftrw = require('thriftrw');\nvar _logger = require('../logger');\nvar _logger2 = _interopRequireDefault(_logger);\nvar _sender_utils = require('./sender_utils');\nvar _sender_utils2 = _interopRequireDefault(_sender_utils);\nvar _thrift = require('../thrift');\nvar _thrift2 = _interopRequireDefault(_thrift);\nvar _util = require('../util');\nvar _util2 = _interopRequireDefault(_util);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar HOST = 'localhost';\nvar PORT = 6832;\nvar SOCKET_TYPE = 'udp4';\nvar UDP_PACKET_MAX_LENGTH = 65000;\nvar UDPSender = function () {\n  // size of currently batched spans as Thrift bytes\n\n  function UDPSender() {\n    var _this = this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, UDPSender);\n    this._host = options.host || HOST;\n    this._port = options.port || PORT;\n    this._socketType = options.socketType || SOCKET_TYPE;\n    this._maxPacketSize = options.maxPacketSize || UDP_PACKET_MAX_LENGTH;\n    this._logger = options.logger || new _logger2.default();\n    this._client = _dgram2.default.createSocket(this._socketType);\n    this._client.on('error', function (err) {\n      _this._logger.error('error sending spans over UDP: ' + err);\n    });\n    this._agentThrift = new _thriftrw.Thrift({\n      entryPoint: _thrift2.default.buildAgentThriftPath(),\n      allowOptionalArguments: true,\n      allowFilesystemAccess: true\n    });\n    this._jaegerThrift = new _thriftrw.Thrift({\n      source: _thrift2.default.loadJaegerThriftDefinition(),\n      allowOptionalArguments: true\n    });\n    this._totalSpanBytes = 0;\n  } // maxPacketSize - (batch + tags overhead)\n\n  _createClass(UDPSender, [{\n    key: '_calcBatchSize',\n    value: function _calcBatchSize(batch) {\n      return this._agentThrift.Agent.emitBatch.argumentsMessageRW.byteLength(this._convertBatchToThriftMessage()).length;\n    }\n  }, {\n    key: '_calcSpanSize',\n    value: function _calcSpanSize(span) {\n      return this._jaegerThrift.Span.rw.byteLength(new this._jaegerThrift.Span(span));\n    }\n  }, {\n    key: 'setProcess',\n    value: function setProcess(process) {\n      // This function is only called once during reporter construction, and thus will\n      // give us the length of the batch before any spans have been added to the span\n      // list in batch.\n      this._process = process;\n      this._batch = {\n        process: this._process,\n        spans: []\n      };\n      this._thriftProcessMessage = _sender_utils2.default.convertProcessToThrift(this._jaegerThrift, process);\n      this._emitSpanBatchOverhead = this._calcBatchSize(this._batch);\n      this._maxSpanBytes = this._maxPacketSize - this._emitSpanBatchOverhead;\n    }\n  }, {\n    key: 'append',\n    value: function append(span, callback) {\n      var _this2 = this;\n      var _calcSpanSize2 = this._calcSpanSize(span),\n        err = _calcSpanSize2.err,\n        length = _calcSpanSize2.length;\n      if (err) {\n        _sender_utils2.default.invokeCallback(callback, 1, 'error converting span to Thrift: ' + err);\n        return;\n      }\n      var spanSize = length;\n      if (spanSize > this._maxSpanBytes) {\n        _sender_utils2.default.invokeCallback(callback, 1, 'span size ' + spanSize + ' is larger than maxSpanSize ' + this._maxSpanBytes);\n        return;\n      }\n      if (this._totalSpanBytes + spanSize <= this._maxSpanBytes) {\n        this._batch.spans.push(span);\n        this._totalSpanBytes += spanSize;\n        if (this._totalSpanBytes < this._maxSpanBytes) {\n          // still have space in the buffer, don't flush it yet\n          _sender_utils2.default.invokeCallback(callback, 0);\n          return;\n        }\n        // buffer size === this._maxSpanBytes\n        this.flush(callback);\n        return;\n      }\n      this.flush(function (numSpans, err) {\n        // TODO theoretically we can have buffer overflow here too, if many spans were appended during flush()\n        _this2._batch.spans.push(span);\n        _this2._totalSpanBytes += spanSize;\n        _sender_utils2.default.invokeCallback(callback, numSpans, err);\n      });\n    }\n  }, {\n    key: 'flush',\n    value: function flush(callback) {\n      var numSpans = this._batch.spans.length;\n      if (!numSpans) {\n        _sender_utils2.default.invokeCallback(callback, 0);\n        return;\n      }\n      var bufferLen = this._totalSpanBytes + this._emitSpanBatchOverhead;\n      var thriftBuffer = _util2.default.newBuffer(bufferLen);\n      var writeResult = this._agentThrift.Agent.emitBatch.argumentsMessageRW.writeInto(this._convertBatchToThriftMessage(), thriftBuffer, 0);\n      this._reset();\n      if (writeResult.err) {\n        _sender_utils2.default.invokeCallback(callback, numSpans, 'error writing Thrift object: ' + writeResult.err);\n        return;\n      }\n\n      // Having the error callback here does not prevent uncaught exception from being thrown,\n      // that's why in the constructor we also add a general on('error') handler.\n      this._client.send(thriftBuffer, 0, thriftBuffer.length, this._port, this._host, function (err, sent) {\n        if (err) {\n          var error = err && 'error sending spans over UDP: ' + err + ', packet size: ' + writeResult.offset + ', bytes sent: ' + sent;\n          _sender_utils2.default.invokeCallback(callback, numSpans, error);\n        } else {\n          _sender_utils2.default.invokeCallback(callback, numSpans);\n        }\n      });\n    }\n  }, {\n    key: '_convertBatchToThriftMessage',\n    value: function _convertBatchToThriftMessage() {\n      var spanMessages = [];\n      for (var i = 0; i < this._batch.spans.length; i++) {\n        var span = this._batch.spans[i];\n        spanMessages.push(new this._jaegerThrift.Span(span));\n      }\n      return new this._agentThrift.Agent.emitBatch.ArgumentsMessage({\n        version: 1,\n        id: 0,\n        body: {\n          batch: new this._jaegerThrift.Batch({\n            process: this._thriftProcessMessage,\n            spans: spanMessages\n          })\n        }\n      });\n    }\n  }, {\n    key: '_reset',\n    value: function _reset() {\n      this._batch.spans = [];\n      this._totalSpanBytes = 0;\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this._client.close();\n    }\n  }]);\n  return UDPSender;\n}();\nexports.default = UDPSender;","map":{"version":3,"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_dgram","require","_dgram2","_interopRequireDefault","_fs","_fs2","_path","_path2","_thriftrw","_logger","_logger2","_sender_utils","_sender_utils2","_thrift","_thrift2","_util","_util2","obj","__esModule","default","_classCallCheck","instance","TypeError","HOST","PORT","SOCKET_TYPE","UDP_PACKET_MAX_LENGTH","UDPSender","_this","options","arguments","undefined","_host","host","_port","port","_socketType","socketType","_maxPacketSize","maxPacketSize","logger","_client","createSocket","on","err","error","_agentThrift","Thrift","entryPoint","buildAgentThriftPath","allowOptionalArguments","allowFilesystemAccess","_jaegerThrift","source","loadJaegerThriftDefinition","_totalSpanBytes","_calcBatchSize","batch","Agent","emitBatch","argumentsMessageRW","byteLength","_convertBatchToThriftMessage","_calcSpanSize","span","Span","rw","setProcess","process","_process","_batch","spans","_thriftProcessMessage","convertProcessToThrift","_emitSpanBatchOverhead","_maxSpanBytes","append","callback","_this2","_calcSpanSize2","invokeCallback","spanSize","push","flush","numSpans","bufferLen","thriftBuffer","newBuffer","writeResult","writeInto","_reset","send","sent","offset","spanMessages","ArgumentsMessage","version","id","body","Batch","close"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/jaeger-client/dist/src/reporters/udp_sender.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nvar _dgram = require('dgram');\n\nvar _dgram2 = _interopRequireDefault(_dgram);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _thriftrw = require('thriftrw');\n\nvar _logger = require('../logger');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _sender_utils = require('./sender_utils');\n\nvar _sender_utils2 = _interopRequireDefault(_sender_utils);\n\nvar _thrift = require('../thrift');\n\nvar _thrift2 = _interopRequireDefault(_thrift);\n\nvar _util = require('../util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar HOST = 'localhost';\nvar PORT = 6832;\nvar SOCKET_TYPE = 'udp4';\nvar UDP_PACKET_MAX_LENGTH = 65000;\n\nvar UDPSender = function () {\n  // size of currently batched spans as Thrift bytes\n\n  function UDPSender() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, UDPSender);\n\n    this._host = options.host || HOST;\n    this._port = options.port || PORT;\n    this._socketType = options.socketType || SOCKET_TYPE;\n    this._maxPacketSize = options.maxPacketSize || UDP_PACKET_MAX_LENGTH;\n    this._logger = options.logger || new _logger2.default();\n    this._client = _dgram2.default.createSocket(this._socketType);\n    this._client.on('error', function (err) {\n      _this._logger.error('error sending spans over UDP: ' + err);\n    });\n    this._agentThrift = new _thriftrw.Thrift({\n      entryPoint: _thrift2.default.buildAgentThriftPath(),\n      allowOptionalArguments: true,\n      allowFilesystemAccess: true\n    });\n    this._jaegerThrift = new _thriftrw.Thrift({\n      source: _thrift2.default.loadJaegerThriftDefinition(),\n      allowOptionalArguments: true\n    });\n    this._totalSpanBytes = 0;\n  } // maxPacketSize - (batch + tags overhead)\n\n\n  _createClass(UDPSender, [{\n    key: '_calcBatchSize',\n    value: function _calcBatchSize(batch) {\n      return this._agentThrift.Agent.emitBatch.argumentsMessageRW.byteLength(this._convertBatchToThriftMessage()).length;\n    }\n  }, {\n    key: '_calcSpanSize',\n    value: function _calcSpanSize(span) {\n      return this._jaegerThrift.Span.rw.byteLength(new this._jaegerThrift.Span(span));\n    }\n  }, {\n    key: 'setProcess',\n    value: function setProcess(process) {\n      // This function is only called once during reporter construction, and thus will\n      // give us the length of the batch before any spans have been added to the span\n      // list in batch.\n      this._process = process;\n      this._batch = {\n        process: this._process,\n        spans: []\n      };\n\n      this._thriftProcessMessage = _sender_utils2.default.convertProcessToThrift(this._jaegerThrift, process);\n      this._emitSpanBatchOverhead = this._calcBatchSize(this._batch);\n      this._maxSpanBytes = this._maxPacketSize - this._emitSpanBatchOverhead;\n    }\n  }, {\n    key: 'append',\n    value: function append(span, callback) {\n      var _this2 = this;\n\n      var _calcSpanSize2 = this._calcSpanSize(span),\n          err = _calcSpanSize2.err,\n          length = _calcSpanSize2.length;\n\n      if (err) {\n        _sender_utils2.default.invokeCallback(callback, 1, 'error converting span to Thrift: ' + err);\n        return;\n      }\n      var spanSize = length;\n      if (spanSize > this._maxSpanBytes) {\n        _sender_utils2.default.invokeCallback(callback, 1, 'span size ' + spanSize + ' is larger than maxSpanSize ' + this._maxSpanBytes);\n        return;\n      }\n\n      if (this._totalSpanBytes + spanSize <= this._maxSpanBytes) {\n        this._batch.spans.push(span);\n        this._totalSpanBytes += spanSize;\n        if (this._totalSpanBytes < this._maxSpanBytes) {\n          // still have space in the buffer, don't flush it yet\n          _sender_utils2.default.invokeCallback(callback, 0);\n          return;\n        }\n        // buffer size === this._maxSpanBytes\n        this.flush(callback);\n        return;\n      }\n\n      this.flush(function (numSpans, err) {\n        // TODO theoretically we can have buffer overflow here too, if many spans were appended during flush()\n        _this2._batch.spans.push(span);\n        _this2._totalSpanBytes += spanSize;\n        _sender_utils2.default.invokeCallback(callback, numSpans, err);\n      });\n    }\n  }, {\n    key: 'flush',\n    value: function flush(callback) {\n      var numSpans = this._batch.spans.length;\n      if (!numSpans) {\n        _sender_utils2.default.invokeCallback(callback, 0);\n        return;\n      }\n\n      var bufferLen = this._totalSpanBytes + this._emitSpanBatchOverhead;\n      var thriftBuffer = _util2.default.newBuffer(bufferLen);\n      var writeResult = this._agentThrift.Agent.emitBatch.argumentsMessageRW.writeInto(this._convertBatchToThriftMessage(), thriftBuffer, 0);\n      this._reset();\n\n      if (writeResult.err) {\n        _sender_utils2.default.invokeCallback(callback, numSpans, 'error writing Thrift object: ' + writeResult.err);\n        return;\n      }\n\n      // Having the error callback here does not prevent uncaught exception from being thrown,\n      // that's why in the constructor we also add a general on('error') handler.\n      this._client.send(thriftBuffer, 0, thriftBuffer.length, this._port, this._host, function (err, sent) {\n        if (err) {\n          var error = err && 'error sending spans over UDP: ' + err + ', packet size: ' + writeResult.offset + ', bytes sent: ' + sent;\n          _sender_utils2.default.invokeCallback(callback, numSpans, error);\n        } else {\n          _sender_utils2.default.invokeCallback(callback, numSpans);\n        }\n      });\n    }\n  }, {\n    key: '_convertBatchToThriftMessage',\n    value: function _convertBatchToThriftMessage() {\n      var spanMessages = [];\n      for (var i = 0; i < this._batch.spans.length; i++) {\n        var span = this._batch.spans[i];\n        spanMessages.push(new this._jaegerThrift.Span(span));\n      }\n\n      return new this._agentThrift.Agent.emitBatch.ArgumentsMessage({\n        version: 1,\n        id: 0,\n        body: {\n          batch: new this._jaegerThrift.Batch({\n            process: this._thriftProcessMessage,\n            spans: spanMessages\n          })\n        }\n      });\n    }\n  }, {\n    key: '_reset',\n    value: function _reset() {\n      this._batch.spans = [];\n      this._totalSpanBytes = 0;\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this._client.close();\n    }\n  }]);\n\n  return UDPSender;\n}();\n\nexports.default = UDPSender;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}