{"ast":null,"code":"// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint max-len:[0, 120] */\n/* eslint max-statements:[0, 99] */\n'use strict';\n\nvar bufrw = require('bufrw');\nvar inherits = require('util').inherits;\nvar errors = require('./errors');\nfunction TPair(key, val) {\n  if (!(this instanceof TPair)) {\n    return new TPair(key, val);\n  }\n  this.key = key;\n  this.val = val;\n}\nfunction TMap(ktypeid, vtypeid, pairs) {\n  if (!(this instanceof TMap)) {\n    return new TMap(ktypeid, vtypeid, pairs);\n  }\n  this.ktypeid = ktypeid;\n  this.vtypeid = vtypeid;\n  this.pairs = pairs || [];\n}\nfunction TMapRW(opts) {\n  if (!(this instanceof TMapRW)) {\n    return new TMapRW(opts);\n  }\n  this.ttypes = opts.ttypes;\n  bufrw.Base.call(this);\n}\ninherits(TMapRW, bufrw.Base);\nTMapRW.prototype.headerRW = bufrw.Series([bufrw.Int8, bufrw.Int8, bufrw.Int32BE]);\nTMapRW.prototype.poolByteLength = function poolByteLength(destResult, map) {\n  var ktype = this.ttypes[map.ktypeid];\n  if (!ktype) {\n    return destResult.reset(errors.InvalidTypeidError({\n      what: 'map::ktype',\n      typeid: map.ktypeid\n    }));\n  }\n  var vtype = this.ttypes[map.vtypeid];\n  if (!vtype) {\n    return destResult.reset(errors.InvalidTypeidError({\n      what: 'map::vtype',\n      typeid: map.vtypeid\n    }));\n  }\n  var length = 6; // header length\n  var t;\n  for (var i = 0; i < map.pairs.length; i++) {\n    var pair = map.pairs[i];\n    t = ktype.poolByteLength(destResult, pair.key);\n    // istanbul ignore if\n    if (t.err) {\n      return t;\n    }\n    length += t.length;\n    t = vtype.poolByteLength(destResult, pair.val);\n    // istanbul ignore if\n    if (t.err) {\n      return t;\n    }\n    length += t.length;\n  }\n  return destResult.reset(null, length);\n};\nTMapRW.prototype.poolWriteInto = function poolWriteInto(destResult, map, buffer, offset) {\n  var ktype = this.ttypes[map.ktypeid];\n  if (!ktype) {\n    return destResult.reset(errors.InvalidTypeidError({\n      what: 'map::ktype',\n      typeid: map.ktypeid\n    }));\n  }\n  var vtype = this.ttypes[map.vtypeid];\n  if (!vtype) {\n    return destResult.reset(errors.InvalidTypeidError({\n      what: 'map::vtype',\n      typeid: map.vtypeid\n    }));\n  }\n  var t = this.headerRW.poolWriteInto(destResult, [map.ktypeid, map.vtypeid, map.pairs.length], buffer, offset);\n  // istanbul ignore if\n  if (t.err) {\n    return t;\n  }\n  offset = t.offset;\n  for (var i = 0; i < map.pairs.length; i++) {\n    var pair = map.pairs[i];\n    t = ktype.poolWriteInto(destResult, pair.key, buffer, offset);\n    // istanbul ignore if\n    if (t.err) {\n      return t;\n    }\n    offset = t.offset;\n    t = vtype.poolWriteInto(destResult, pair.val, buffer, offset);\n    // istanbul ignore if\n    if (t.err) {\n      return t;\n    }\n    offset = t.offset;\n  }\n  return destResult.reset(null, offset);\n};\nTMapRW.prototype.poolReadFrom = function poolReadFrom(destResult, buffer, offset) {\n  var t = this.headerRW.poolReadFrom(destResult, buffer, offset);\n  // istanbul ignore if\n  if (t.err) {\n    return t;\n  }\n  offset = t.offset;\n  var ktypeid = t.value[0];\n  var vtypeid = t.value[1];\n  var size = t.value[2];\n  if (size < 0) {\n    return destResult.reset(errors.InvalidSizeError({\n      size: size,\n      what: 'map::size'\n    }), offset);\n  }\n  var map = new TMap(ktypeid, vtypeid);\n  var ktype = this.ttypes[map.ktypeid];\n  if (!ktype) {\n    return destResult.reset(errors.InvalidTypeidError({\n      what: 'map::ktype',\n      typeid: map.ktypeid\n    }), offset);\n  }\n  var vtype = this.ttypes[map.vtypeid];\n  if (!vtype) {\n    return destResult.reset(errors.InvalidTypeidError({\n      what: 'map::vtype',\n      typeid: map.vtypeid\n    }), offset);\n  }\n  for (var i = 0; i < size; i++) {\n    t = ktype.poolReadFrom(destResult, buffer, offset);\n    // istanbul ignore if\n    if (t.err) {\n      return t;\n    }\n    offset = t.offset;\n    var key = t.value;\n    t = vtype.poolReadFrom(destResult, buffer, offset);\n    // istanbul ignore if\n    if (t.err) {\n      return t;\n    }\n    offset = t.offset;\n    var val = t.value;\n    map.pairs.push(TPair(key, val));\n  }\n  return destResult.reset(null, offset, map);\n};\nmodule.exports.TPair = TPair;\nmodule.exports.TMap = TMap;\nmodule.exports.TMapRW = TMapRW;","map":{"version":3,"names":["bufrw","require","inherits","errors","TPair","key","val","TMap","ktypeid","vtypeid","pairs","TMapRW","opts","ttypes","Base","call","prototype","headerRW","Series","Int8","Int32BE","poolByteLength","destResult","map","ktype","reset","InvalidTypeidError","what","typeid","vtype","length","t","i","pair","err","poolWriteInto","buffer","offset","poolReadFrom","value","size","InvalidSizeError","push","module","exports"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/thriftrw/tmap.js"],"sourcesContent":["// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint max-len:[0, 120] */\n/* eslint max-statements:[0, 99] */\n'use strict';\n\nvar bufrw = require('bufrw');\nvar inherits = require('util').inherits;\nvar errors = require('./errors');\n\nfunction TPair(key, val) {\n    if (!(this instanceof TPair)) {\n        return new TPair(key, val);\n    }\n    this.key = key;\n    this.val = val;\n}\n\nfunction TMap(ktypeid, vtypeid, pairs) {\n    if (!(this instanceof TMap)) {\n        return new TMap(ktypeid, vtypeid, pairs);\n    }\n    this.ktypeid = ktypeid;\n    this.vtypeid = vtypeid;\n    this.pairs = pairs || [];\n}\n\nfunction TMapRW(opts) {\n    if (!(this instanceof TMapRW)) {\n        return new TMapRW(opts);\n    }\n    this.ttypes = opts.ttypes;\n\n    bufrw.Base.call(this);\n}\ninherits(TMapRW, bufrw.Base);\n\nTMapRW.prototype.headerRW = bufrw.Series([bufrw.Int8, bufrw.Int8, bufrw.Int32BE]);\n\nTMapRW.prototype.poolByteLength = function poolByteLength(destResult, map) {\n    var ktype = this.ttypes[map.ktypeid];\n    if (!ktype) {\n        return destResult.reset(errors.InvalidTypeidError({\n            what: 'map::ktype',\n            typeid: map.ktypeid\n        }));\n    }\n    var vtype = this.ttypes[map.vtypeid];\n    if (!vtype) {\n        return destResult.reset(errors.InvalidTypeidError({\n            what: 'map::vtype',\n            typeid: map.vtypeid\n        }));\n    }\n\n    var length = 6; // header length\n    var t;\n    for (var i = 0; i < map.pairs.length; i++) {\n        var pair = map.pairs[i];\n\n        t = ktype.poolByteLength(destResult, pair.key);\n        // istanbul ignore if\n        if (t.err) {\n            return t;\n        }\n        length += t.length;\n\n        t = vtype.poolByteLength(destResult, pair.val);\n        // istanbul ignore if\n        if (t.err) {\n            return t;\n        }\n        length += t.length;\n    }\n    return destResult.reset(null, length);\n};\n\nTMapRW.prototype.poolWriteInto = function poolWriteInto(destResult, map, buffer, offset) {\n    var ktype = this.ttypes[map.ktypeid];\n    if (!ktype) {\n        return destResult.reset(errors.InvalidTypeidError({\n            what: 'map::ktype',\n            typeid: map.ktypeid\n        }));\n    }\n    var vtype = this.ttypes[map.vtypeid];\n    if (!vtype) {\n        return destResult.reset(errors.InvalidTypeidError({\n            what: 'map::vtype',\n            typeid: map.vtypeid\n        }));\n    }\n\n    var t = this.headerRW.poolWriteInto(destResult,\n        [map.ktypeid, map.vtypeid, map.pairs.length], buffer, offset);\n    // istanbul ignore if\n    if (t.err) {\n        return t;\n    }\n    offset = t.offset;\n\n    for (var i = 0; i < map.pairs.length; i++) {\n        var pair = map.pairs[i];\n\n        t = ktype.poolWriteInto(destResult, pair.key, buffer, offset);\n        // istanbul ignore if\n        if (t.err) {\n            return t;\n        }\n        offset = t.offset;\n\n        t = vtype.poolWriteInto(destResult, pair.val, buffer, offset);\n        // istanbul ignore if\n        if (t.err) {\n            return t;\n        }\n        offset = t.offset;\n    }\n    return destResult.reset(null, offset);\n};\n\nTMapRW.prototype.poolReadFrom = function poolReadFrom(destResult, buffer, offset) {\n    var t = this.headerRW.poolReadFrom(destResult, buffer, offset);\n    // istanbul ignore if\n    if (t.err) {\n        return t;\n    }\n    offset = t.offset;\n    var ktypeid = t.value[0];\n    var vtypeid = t.value[1];\n    var size = t.value[2];\n    if (size < 0) {\n        return destResult.reset(errors.InvalidSizeError({\n            size: size,\n            what: 'map::size'\n        }), offset);\n    }\n\n    var map = new TMap(ktypeid, vtypeid);\n    var ktype = this.ttypes[map.ktypeid];\n    if (!ktype) {\n        return destResult.reset(errors.InvalidTypeidError({\n            what: 'map::ktype',\n            typeid: map.ktypeid\n        }), offset);\n    }\n    var vtype = this.ttypes[map.vtypeid];\n    if (!vtype) {\n        return destResult.reset(errors.InvalidTypeidError({\n            what: 'map::vtype',\n            typeid: map.vtypeid\n        }), offset);\n    }\n\n    for (var i = 0; i < size; i++) {\n        t = ktype.poolReadFrom(destResult, buffer, offset);\n        // istanbul ignore if\n        if (t.err) {\n            return t;\n        }\n        offset = t.offset;\n        var key = t.value;\n\n        t = vtype.poolReadFrom(destResult, buffer, offset);\n        // istanbul ignore if\n        if (t.err) {\n            return t;\n        }\n        offset = t.offset;\n        var val = t.value;\n\n        map.pairs.push(TPair(key, val));\n    }\n    return destResult.reset(null, offset, map);\n};\n\nmodule.exports.TPair = TPair;\nmodule.exports.TMap = TMap;\nmodule.exports.TMapRW = TMapRW;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}