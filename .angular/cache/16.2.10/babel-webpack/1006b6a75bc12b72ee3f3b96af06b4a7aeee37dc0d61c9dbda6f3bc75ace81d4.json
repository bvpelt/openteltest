{"ast":null,"code":"/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\n\n/**\r\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/Long.js for details\r\n */\n(function (global, factory) {\n  /* AMD */if (typeof define === 'function' && define[\"amd\"]) define([], factory);\n  /* CommonJS */else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"]) module[\"exports\"] = factory();\n  /* Global */else (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\n})(this, function () {\n  \"use strict\";\n\n  /**\r\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n   *  See the from* functions below for more convenient ways of constructing Longs.\r\n   * @exports Long\r\n   * @class A Long class for representing a 64 bit two's-complement integer value.\r\n   * @param {number} low The low (signed) 32 bits of the long\r\n   * @param {number} high The high (signed) 32 bits of the long\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @constructor\r\n   */\n  function Long(low, high, unsigned) {\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     * @expose\r\n     */\n    this.low = low | 0;\n\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     * @expose\r\n     */\n    this.high = high | 0;\n\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     * @expose\r\n     */\n    this.unsigned = !!unsigned;\n  }\n\n  // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n  /**\r\n   * An indicator used to reliably determine if an object is a Long or not.\r\n   * @type {boolean}\r\n   * @const\r\n   * @expose\r\n   * @private\r\n   */\n  Long.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true,\n    enumerable: false,\n    configurable: false\n  });\n\n  /**\r\n   * Tests if the specified object is a Long.\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.isLong = function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  };\n\n  /**\r\n   * A cache of the Long representations of small integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n  var INT_CACHE = {};\n\n  /**\r\n   * A cache of the Long representations of small unsigned integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n  var UINT_CACHE = {};\n\n  /**\r\n   * Returns a Long representing the given 32 bit integer value.\r\n   * @param {number} value The 32 bit integer in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   * @expose\r\n   */\n  Long.fromInt = function fromInt(value, unsigned) {\n    var obj, cachedObj;\n    if (!unsigned) {\n      value = value | 0;\n      if (-128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = new Long(value, value < 0 ? -1 : 0, false);\n      if (-128 <= value && value < 128) INT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value = value >>> 0;\n      if (0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\n      if (0 <= value && value < 256) UINT_CACHE[value] = obj;\n      return obj;\n    }\n  };\n\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @param {number} value The number in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   * @expose\r\n   */\n  Long.fromNumber = function fromNumber(value, unsigned) {\n    unsigned = !!unsigned;\n    if (isNaN(value) || !isFinite(value)) return Long.ZERO;\n    if (!unsigned && value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;\n    if (!unsigned && value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;\n    if (unsigned && value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;\n    if (value < 0) return Long.fromNumber(-value, unsigned).negate();\n    return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  };\n\n  /**\r\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n   *  assumed to use 32 bits.\r\n   * @param {number} lowBits The low 32 bits\r\n   * @param {number} highBits The high 32 bits\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   * @expose\r\n   */\n  Long.fromBits = function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  };\n\n  /**\r\n   * Returns a Long representation of the given string, written using the specified radix.\r\n   * @param {string} str The textual representation of the Long\r\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n   * @returns {!Long} The corresponding Long value\r\n   * @expose\r\n   */\n  Long.fromString = function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('number format error: empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return Long.ZERO;\n    if (typeof unsigned === 'number')\n      // For goog.math.long compatibility\n      radix = unsigned, unsigned = false;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw Error('radix out of range: ' + radix);\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('number format error: interior \"-\" character: ' + str);else if (p === 0) return Long.fromString(str.substring(1), unsigned, radix).negate();\n\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n    var result = Long.ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i);\n      var value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = Long.fromNumber(Math.pow(radix, size));\n        result = result.multiply(power).add(Long.fromNumber(value));\n      } else {\n        result = result.multiply(radixToPower);\n        result = result.add(Long.fromNumber(value));\n      }\n    }\n    result.unsigned = unsigned;\n    return result;\n  };\n\n  /**\r\n   * Converts the specified value to a Long.\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n  Long.fromValue = function fromValue(val) {\n    if (val /* is compatible */ instanceof Long) return val;\n    if (typeof val === 'number') return Long.fromNumber(val);\n    if (typeof val === 'string') return Long.fromString(val);\n    // Throws for non-objects, converts non-instanceof Long:\n    return new Long(val.low, val.high, val.unsigned);\n  };\n\n  // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_16_DBL = 1 << 16;\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_24_DBL = 1 << 24;\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n  /**\r\n   * @type {!Long}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\n\n  /**\r\n   * Signed zero.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n  Long.ZERO = Long.fromInt(0);\n\n  /**\r\n   * Unsigned zero.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n  Long.UZERO = Long.fromInt(0, true);\n\n  /**\r\n   * Signed one.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n  Long.ONE = Long.fromInt(1);\n\n  /**\r\n   * Unsigned one.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n  Long.UONE = Long.fromInt(1, true);\n\n  /**\r\n   * Signed negative one.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n  Long.NEG_ONE = Long.fromInt(-1);\n\n  /**\r\n   * Maximum signed value.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n  Long.MAX_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n  /**\r\n   * Maximum unsigned value.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n  Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n  /**\r\n   * Minimum signed value.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n  Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n\n  /**\r\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n   * @returns {number}\r\n   * @expose\r\n   */\n  Long.prototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n\n  /**\r\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n   * @returns {number}\r\n   * @expose\r\n   */\n  Long.prototype.toNumber = function toNumber() {\n    if (this.unsigned) {\n      return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n\n  /**\r\n   * Converts the Long to a string written in the specified radix.\r\n   * @param {number=} radix Radix (2-36), defaults to 10\r\n   * @returns {string}\r\n   * @override\r\n   * @throws {RangeError} If `radix` is out of range\r\n   * @expose\r\n   */\n  Long.prototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix out of range: ' + radix);\n    if (this.isZero()) return '0';\n    var rem;\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.equals(Long.MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = Long.fromNumber(radix);\n        var div = this.divide(radixLong);\n        rem = div.multiply(radixLong).subtract(this);\n        return div.toString(radix) + rem.toInt().toString(radix);\n      } else return '-' + this.negate().toString(radix);\n    }\n\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n    rem = this;\n    var result = '';\n    while (true) {\n      var remDiv = rem.divide(radixToPower),\n        intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0,\n        digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n        result = '' + digits + result;\n      }\n    }\n  };\n\n  /**\r\n   * Gets the high 32 bits as a signed integer.\r\n   * @returns {number} Signed high bits\r\n   * @expose\r\n   */\n  Long.prototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n\n  /**\r\n   * Gets the high 32 bits as an unsigned integer.\r\n   * @returns {number} Unsigned high bits\r\n   * @expose\r\n   */\n  Long.prototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n\n  /**\r\n   * Gets the low 32 bits as a signed integer.\r\n   * @returns {number} Signed low bits\r\n   * @expose\r\n   */\n  Long.prototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n\n  /**\r\n   * Gets the low 32 bits as an unsigned integer.\r\n   * @returns {number} Unsigned low bits\r\n   * @expose\r\n   */\n  Long.prototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n\n  /**\r\n   * Gets the number of bits needed to represent the absolute value of this Long.\r\n   * @returns {number}\r\n   * @expose\r\n   */\n  Long.prototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative())\n      // Unsigned Longs are never negative\n      return this.equals(Long.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n\n  /**\r\n   * Tests if this Long's value equals zero.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is negative.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is positive.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is odd.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n\n  /**\r\n   * Tests if this Long's value is even.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n\n  /**\r\n   * Tests if this Long's value equals the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.equals = function equals(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n\n  /**\r\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.eq = Long.prototype.equals;\n\n  /**\r\n   * Tests if this Long's value differs from the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.notEquals = function notEquals(other) {\n    return !this.equals( /* validates */other);\n  };\n\n  /**\r\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.neq = Long.prototype.notEquals;\n\n  /**\r\n   * Tests if this Long's value is less than the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.lessThan = function lessThan(other) {\n    return this.compare( /* validates */other) < 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.lt = Long.prototype.lessThan;\n\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.compare( /* validates */other) <= 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.lte = Long.prototype.lessThanOrEqual;\n\n  /**\r\n   * Tests if this Long's value is greater than the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.greaterThan = function greaterThan(other) {\n    return this.compare( /* validates */other) > 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.gt = Long.prototype.greaterThan;\n\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.compare( /* validates */other) >= 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n  Long.prototype.gte = Long.prototype.greaterThanOrEqual;\n\n  /**\r\n   * Compares this Long's value with the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   * @expose\r\n   */\n  Long.prototype.compare = function compare(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.equals(other)) return 0;\n    var thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1;\n    // At this point the sign bits are the same\n    if (!this.unsigned) return this.subtract(other).isNegative() ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n\n  /**\r\n   * Negates this Long's value.\r\n   * @returns {!Long} Negated Long\r\n   * @expose\r\n   */\n  Long.prototype.negate = function negate() {\n    if (!this.unsigned && this.equals(Long.MIN_VALUE)) return Long.MIN_VALUE;\n    return this.not().add(Long.ONE);\n  };\n\n  /**\r\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n   * @function\r\n   * @returns {!Long} Negated Long\r\n   * @expose\r\n   */\n  Long.prototype.neg = Long.prototype.negate;\n\n  /**\r\n   * Returns the sum of this and the specified Long.\r\n   * @param {!Long|number|string} addend Addend\r\n   * @returns {!Long} Sum\r\n   * @expose\r\n   */\n  Long.prototype.add = function add(addend) {\n    if (!Long.isLong(addend)) addend = Long.fromValue(addend);\n\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n\n  /**\r\n   * Returns the difference of this and the specified Long.\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   * @expose\r\n   */\n  Long.prototype.subtract = function subtract(subtrahend) {\n    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\n    return this.add(subtrahend.negate());\n  };\n\n  /**\r\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n   * @function\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   * @expose\r\n   */\n  Long.prototype.sub = Long.prototype.subtract;\n\n  /**\r\n   * Returns the product of this and the specified Long.\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   * @expose\r\n   */\n  Long.prototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return Long.ZERO;\n    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\n    if (multiplier.isZero()) return Long.ZERO;\n    if (this.equals(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    if (multiplier.equals(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.negate().multiply(multiplier.negate());else return this.negate().multiply(multiplier).negate();\n    } else if (multiplier.isNegative()) return this.multiply(multiplier.negate()).negate();\n\n    // If both longs are small, use float multiplication\n    if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n\n  /**\r\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n   * @function\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   * @expose\r\n   */\n  Long.prototype.mul = Long.prototype.multiply;\n\n  /**\r\n   * Returns this Long divided by the specified.\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   * @expose\r\n   */\n  Long.prototype.divide = function divide(divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    if (divisor.isZero()) throw new Error('division by zero');\n    if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;\n    var approx, rem, res;\n    if (this.equals(Long.MIN_VALUE)) {\n      if (divisor.equals(Long.ONE) || divisor.equals(Long.NEG_ONE)) return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.equals(Long.MIN_VALUE)) return Long.ONE;else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shiftRight(1);\n        approx = halfThis.divide(divisor).shiftLeft(1);\n        if (approx.equals(Long.ZERO)) {\n          return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n        } else {\n          rem = this.subtract(divisor.multiply(approx));\n          res = approx.add(rem.divide(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.equals(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative()) return this.negate().divide(divisor.negate());\n      return this.negate().divide(divisor).negate();\n    } else if (divisor.isNegative()) return this.divide(divisor.negate()).negate();\n\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    res = Long.ZERO;\n    rem = this;\n    while (rem.greaterThanOrEqual(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n      // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n        delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48),\n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = Long.fromNumber(approx),\n        approxRem = approxRes.multiply(divisor);\n      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n        approx -= delta;\n        approxRes = Long.fromNumber(approx, this.unsigned);\n        approxRem = approxRes.multiply(divisor);\n      }\n\n      // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n      if (approxRes.isZero()) approxRes = Long.ONE;\n      res = res.add(approxRes);\n      rem = rem.subtract(approxRem);\n    }\n    return res;\n  };\n\n  /**\r\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   * @expose\r\n   */\n  Long.prototype.div = Long.prototype.divide;\n\n  /**\r\n   * Returns this Long modulo the specified.\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   * @expose\r\n   */\n  Long.prototype.modulo = function modulo(divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    return this.subtract(this.divide(divisor).multiply(divisor));\n  };\n\n  /**\r\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   * @expose\r\n   */\n  Long.prototype.mod = Long.prototype.modulo;\n\n  /**\r\n   * Returns the bitwise NOT of this Long.\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n  Long.prototype.not = function not() {\n    return Long.fromBits(~this.low, ~this.high, this.unsigned);\n  };\n\n  /**\r\n   * Returns the bitwise AND of this Long and the specified.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n  Long.prototype.and = function and(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n\n  /**\r\n   * Returns the bitwise OR of this Long and the specified.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n  Long.prototype.or = function or(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n\n  /**\r\n   * Returns the bitwise XOR of this Long and the given one.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n  Long.prototype.xor = function xor(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n  Long.prototype.shiftLeft = function shiftLeft(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return Long.fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n  Long.prototype.shl = Long.prototype.shiftLeft;\n\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n  Long.prototype.shiftRight = function shiftRight(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return Long.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n  Long.prototype.shr = Long.prototype.shiftRight;\n\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n  Long.prototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    numBits &= 63;\n    if (numBits === 0) return this;else {\n      var high = this.high;\n      if (numBits < 32) {\n        var low = this.low;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n      } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);else return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);\n    }\n  };\n\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n  Long.prototype.shru = Long.prototype.shiftRightUnsigned;\n\n  /**\r\n   * Converts this Long to signed.\r\n   * @returns {!Long} Signed long\r\n   * @expose\r\n   */\n  Long.prototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return new Long(this.low, this.high, false);\n  };\n\n  /**\r\n   * Converts this Long to unsigned.\r\n   * @returns {!Long} Unsigned long\r\n   * @expose\r\n   */\n  Long.prototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return new Long(this.low, this.high, true);\n  };\n  return Long;\n});","map":{"version":3,"names":["global","factory","define","require","module","Long","low","high","unsigned","__isLong__","Object","defineProperty","prototype","value","enumerable","configurable","isLong","obj","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","isNaN","isFinite","ZERO","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","negate","TWO_PWR_32_DBL","fromBits","lowBits","highBits","fromString","str","radix","length","Error","p","indexOf","substring","radixToPower","Math","pow","result","i","size","min","parseInt","power","multiply","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","UZERO","ONE","UONE","NEG_ONE","toInt","toNumber","toString","RangeError","isZero","rem","isNegative","equals","radixLong","div","divide","subtract","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","other","eq","notEquals","neq","lessThan","compare","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","thisNeg","otherNeg","not","neg","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtrahend","sub","multiplier","mul","divisor","approx","res","halfThis","shiftRight","shiftLeft","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","and","or","xor","numBits","shl","shr","shiftRightUnsigned","shru","toSigned","toUnsigned"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/long/dist/Long.js"],"sourcesContent":["/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/Long.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module[\"exports\"] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\r\n\r\n})(this, function() {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @constructor\r\n     */\r\n    function Long(low, high, unsigned) {\r\n\r\n        /**\r\n         * The low 32 bits as a signed value.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.low = low|0;\r\n\r\n        /**\r\n         * The high 32 bits as a signed value.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.high = high|0;\r\n\r\n        /**\r\n         * Whether unsigned or not.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        this.unsigned = !!unsigned;\r\n    }\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a Long or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @expose\r\n     * @private\r\n     */\r\n    Long.__isLong__;\r\n\r\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n        value: true,\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.isLong = function isLong(obj) {\r\n        return (obj && obj[\"__isLong__\"]) === true;\r\n    };\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromInt = function fromInt(value, unsigned) {\r\n        var obj, cachedObj;\r\n        if (!unsigned) {\r\n            value = value | 0;\r\n            if (-128 <= value && value < 128) {\r\n                cachedObj = INT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = new Long(value, value < 0 ? -1 : 0, false);\r\n            if (-128 <= value && value < 128)\r\n                INT_CACHE[value] = obj;\r\n            return obj;\r\n        } else {\r\n            value = value >>> 0;\r\n            if (0 <= value && value < 256) {\r\n                cachedObj = UINT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\r\n            if (0 <= value && value < 256)\r\n                UINT_CACHE[value] = obj;\r\n            return obj;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromNumber = function fromNumber(value, unsigned) {\r\n        unsigned = !!unsigned;\r\n        if (isNaN(value) || !isFinite(value))\r\n            return Long.ZERO;\r\n        if (!unsigned && value <= -TWO_PWR_63_DBL)\r\n            return Long.MIN_VALUE;\r\n        if (!unsigned && value + 1 >= TWO_PWR_63_DBL)\r\n            return Long.MAX_VALUE;\r\n        if (unsigned && value >= TWO_PWR_64_DBL)\r\n            return Long.MAX_UNSIGNED_VALUE;\r\n        if (value < 0)\r\n            return Long.fromNumber(-value, unsigned).negate();\r\n        return new Long((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromBits = function fromBits(lowBits, highBits, unsigned) {\r\n        return new Long(lowBits, highBits, unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromString = function fromString(str, unsigned, radix) {\r\n        if (str.length === 0)\r\n            throw Error('number format error: empty string');\r\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n            return Long.ZERO;\r\n        if (typeof unsigned === 'number') // For goog.math.long compatibility\r\n            radix = unsigned,\r\n            unsigned = false;\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw Error('radix out of range: ' + radix);\r\n\r\n        var p;\r\n        if ((p = str.indexOf('-')) > 0)\r\n            throw Error('number format error: interior \"-\" character: ' + str);\r\n        else if (p === 0)\r\n            return Long.fromString(str.substring(1), unsigned, radix).negate();\r\n\r\n        // Do several (8) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = Long.fromNumber(Math.pow(radix, 8));\r\n\r\n        var result = Long.ZERO;\r\n        for (var i = 0; i < str.length; i += 8) {\r\n            var size = Math.min(8, str.length - i);\r\n            var value = parseInt(str.substring(i, i + size), radix);\r\n            if (size < 8) {\r\n                var power = Long.fromNumber(Math.pow(radix, size));\r\n                result = result.multiply(power).add(Long.fromNumber(value));\r\n            } else {\r\n                result = result.multiply(radixToPower);\r\n                result = result.add(Long.fromNumber(value));\r\n            }\r\n        }\r\n        result.unsigned = unsigned;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts the specified value to a Long.\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.fromValue = function fromValue(val) {\r\n        if (val /* is compatible */ instanceof Long)\r\n            return val;\r\n        if (typeof val === 'number')\r\n            return Long.fromNumber(val);\r\n        if (typeof val === 'string')\r\n            return Long.fromString(val);\r\n        // Throws for non-objects, converts non-instanceof Long:\r\n        return new Long(val.low, val.high, val.unsigned);\r\n    };\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.ZERO = Long.fromInt(0);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.UZERO = Long.fromInt(0, true);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.ONE = Long.fromInt(1);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.UONE = Long.fromInt(1, true);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.NEG_ONE = Long.fromInt(-1);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MAX_VALUE = Long.fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MIN_VALUE = Long.fromBits(0, 0x80000000|0, false);\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.toInt = function toInt() {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.toNumber = function toNumber() {\r\n        if (this.unsigned) {\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        }\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     * @expose\r\n     */\r\n    Long.prototype.toString = function toString(radix) {\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix out of range: ' + radix);\r\n        if (this.isZero())\r\n            return '0';\r\n        var rem;\r\n        if (this.isNegative()) { // Unsigned Longs are never negative\r\n            if (this.equals(Long.MIN_VALUE)) {\r\n                // We need to change the Long value before it can be negated, so we remove\r\n                // the bottom-most digit in this base and then recurse to do the rest.\r\n                var radixLong = Long.fromNumber(radix);\r\n                var div = this.divide(radixLong);\r\n                rem = div.multiply(radixLong).subtract(this);\r\n                return div.toString(radix) + rem.toInt().toString(radix);\r\n            } else\r\n                return '-' + this.negate().toString(radix);\r\n        }\r\n\r\n        // Do several (6) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\r\n        rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.divide(radixToPower),\r\n                intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0,\r\n                digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @returns {number} Signed high bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getHighBits = function getHighBits() {\r\n        return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned high bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n        return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @returns {number} Signed low bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getLowBits = function getLowBits() {\r\n        return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned low bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n        return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.getNumBitsAbs = function getNumBitsAbs() {\r\n        if (this.isNegative()) // Unsigned Longs are never negative\r\n            return this.equals(Long.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isZero = function isZero() {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isNegative = function isNegative() {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isPositive = function isPositive() {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isOdd = function isOdd() {\r\n        return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isEven = function isEven() {\r\n        return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.equals = function equals(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.eq = Long.prototype.equals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.notEquals = function notEquals(other) {\r\n        return !this.equals(/* validates */ other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.neq = Long.prototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lessThan = function lessThan(other) {\r\n        return this.compare(/* validates */ other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lt = Long.prototype.lessThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n        return this.compare(/* validates */ other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lte = Long.prototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.greaterThan = function greaterThan(other) {\r\n        return this.compare(/* validates */ other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.gt = Long.prototype.greaterThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n        return this.compare(/* validates */ other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.gte = Long.prototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     * @expose\r\n     */\r\n    Long.prototype.compare = function compare(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        if (this.equals(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(),\r\n            otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        // At this point the sign bits are the same\r\n        if (!this.unsigned)\r\n            return this.subtract(other).isNegative() ? -1 : 1;\r\n        // Both are positive if at least one is unsigned\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @returns {!Long} Negated Long\r\n     * @expose\r\n     */\r\n    Long.prototype.negate = function negate() {\r\n        if (!this.unsigned && this.equals(Long.MIN_VALUE))\r\n            return Long.MIN_VALUE;\r\n        return this.not().add(Long.ONE);\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n     * @function\r\n     * @returns {!Long} Negated Long\r\n     * @expose\r\n     */\r\n    Long.prototype.neg = Long.prototype.negate;\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @param {!Long|number|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     * @expose\r\n     */\r\n    Long.prototype.add = function add(addend) {\r\n        if (!Long.isLong(addend))\r\n            addend = Long.fromValue(addend);\r\n\r\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     * @expose\r\n     */\r\n    Long.prototype.subtract = function subtract(subtrahend) {\r\n        if (!Long.isLong(subtrahend))\r\n            subtrahend = Long.fromValue(subtrahend);\r\n        return this.add(subtrahend.negate());\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n     * @function\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     * @expose\r\n     */\r\n    Long.prototype.sub = Long.prototype.subtract;\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     * @expose\r\n     */\r\n    Long.prototype.multiply = function multiply(multiplier) {\r\n        if (this.isZero())\r\n            return Long.ZERO;\r\n        if (!Long.isLong(multiplier))\r\n            multiplier = Long.fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return Long.ZERO;\r\n        if (this.equals(Long.MIN_VALUE))\r\n            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\r\n        if (multiplier.equals(Long.MIN_VALUE))\r\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\r\n\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.negate().multiply(multiplier.negate());\r\n            else\r\n                return this.negate().multiply(multiplier).negate();\r\n        } else if (multiplier.isNegative())\r\n            return this.multiply(multiplier.negate()).negate();\r\n\r\n        // If both longs are small, use float multiplication\r\n        if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24))\r\n            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n        // We can skip products that would overflow.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n     * @function\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     * @expose\r\n     */\r\n    Long.prototype.mul = Long.prototype.multiply;\r\n\r\n    /**\r\n     * Returns this Long divided by the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     * @expose\r\n     */\r\n    Long.prototype.divide = function divide(divisor) {\r\n        if (!Long.isLong(divisor))\r\n            divisor = Long.fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw(new Error('division by zero'));\r\n        if (this.isZero())\r\n            return this.unsigned ? Long.UZERO : Long.ZERO;\r\n        var approx, rem, res;\r\n        if (this.equals(Long.MIN_VALUE)) {\r\n            if (divisor.equals(Long.ONE) || divisor.equals(Long.NEG_ONE))\r\n                return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.equals(Long.MIN_VALUE))\r\n                return Long.ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shiftRight(1);\r\n                approx = halfThis.divide(divisor).shiftLeft(1);\r\n                if (approx.equals(Long.ZERO)) {\r\n                    return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\r\n                } else {\r\n                    rem = this.subtract(divisor.multiply(approx));\r\n                    res = approx.add(rem.divide(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.equals(Long.MIN_VALUE))\r\n            return this.unsigned ? Long.UZERO : Long.ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.negate().divide(divisor.negate());\r\n            return this.negate().divide(divisor).negate();\r\n        } else if (divisor.isNegative())\r\n            return this.divide(divisor.negate()).negate();\r\n\r\n        // Repeat the following until the remainder is less than other:  find a\r\n        // floating-point that approximates remainder / other *from below*, add this\r\n        // into the result, and subtract it from the remainder.  It is critical that\r\n        // the approximate value is less than or equal to the real value so that the\r\n        // remainder never becomes negative.\r\n        res = Long.ZERO;\r\n        rem = this;\r\n        while (rem.greaterThanOrEqual(divisor)) {\r\n            // Approximate the result of division. This may be a little greater or\r\n            // smaller than the actual value.\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n            // We will tweak the approximate result by changing it in the 48-th digit or\r\n            // the smallest non-fractional digit, whichever is larger.\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n                delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48),\r\n\r\n            // Decrease the approximation until it is smaller than the remainder.  Note\r\n            // that if it is too large, the product overflows and is negative.\r\n                approxRes = Long.fromNumber(approx),\r\n                approxRem = approxRes.multiply(divisor);\r\n            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\r\n                approx -= delta;\r\n                approxRes = Long.fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.multiply(divisor);\r\n            }\r\n\r\n            // We know the answer can't be zero... and actually, zero would cause\r\n            // infinite recursion since we would make no progress.\r\n            if (approxRes.isZero())\r\n                approxRes = Long.ONE;\r\n\r\n            res = res.add(approxRes);\r\n            rem = rem.subtract(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     * @expose\r\n     */\r\n    Long.prototype.div = Long.prototype.divide;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     * @expose\r\n     */\r\n    Long.prototype.modulo = function modulo(divisor) {\r\n        if (!Long.isLong(divisor))\r\n            divisor = Long.fromValue(divisor);\r\n        return this.subtract(this.divide(divisor).multiply(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     * @expose\r\n     */\r\n    Long.prototype.mod = Long.prototype.modulo;\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.not = function not() {\r\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.and = function and(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.or = function or(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.xor = function xor(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftLeft = function shiftLeft(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shl = Long.prototype.shiftLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftRight = function shiftRight(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shr = Long.prototype.shiftRight;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits &= 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            } else if (numBits === 32)\r\n                return Long.fromBits(high, 0, this.unsigned);\r\n            else\r\n                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shru = Long.prototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @returns {!Long} Signed long\r\n     * @expose\r\n     */\r\n    Long.prototype.toSigned = function toSigned() {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return new Long(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @returns {!Long} Unsigned long\r\n     * @expose\r\n     */\r\n    Long.prototype.toUnsigned = function toUnsigned() {\r\n        if (this.unsigned)\r\n            return this;\r\n        return new Long(this.low, this.high, true);\r\n    };\r\n\r\n    return Long;\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}