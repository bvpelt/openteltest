{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ExportResultCode, hrTimeToMicroseconds } from '@opentelemetry/core';\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleSpanExporter = /** @class */function () {\n  function ConsoleSpanExporter() {}\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n    return this._sendSpans(spans, resultCallback);\n  };\n  /**\n   * Shutdown the exporter.\n   */\n  ConsoleSpanExporter.prototype.shutdown = function () {\n    this._sendSpans([]);\n    return this.forceFlush();\n  };\n  /**\n   * Exports any pending spans in exporter\n   */\n  ConsoleSpanExporter.prototype.forceFlush = function () {\n    return Promise.resolve();\n  };\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  ConsoleSpanExporter.prototype._exportInfo = function (span) {\n    var _a;\n    return {\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      traceState: (_a = span.spanContext().traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links\n    };\n  };\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n    var e_1, _a;\n    try {\n      for (var spans_1 = __values(spans), spans_1_1 = spans_1.next(); !spans_1_1.done; spans_1_1 = spans_1.next()) {\n        var span = spans_1_1.value;\n        console.dir(this._exportInfo(span), {\n          depth: 3\n        });\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (spans_1_1 && !spans_1_1.done && (_a = spans_1.return)) _a.call(spans_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    if (done) {\n      return done({\n        code: ExportResultCode.SUCCESS\n      });\n    }\n  };\n  return ConsoleSpanExporter;\n}();\nexport { ConsoleSpanExporter };","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","ExportResultCode","hrTimeToMicroseconds","ConsoleSpanExporter","prototype","export","spans","resultCallback","_sendSpans","shutdown","forceFlush","Promise","resolve","_exportInfo","span","_a","traceId","spanContext","parentId","parentSpanId","traceState","serialize","name","id","spanId","kind","timestamp","startTime","duration","attributes","status","events","links","e_1","spans_1","spans_1_1","console","dir","depth","e_1_1","error","return","code","SUCCESS"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ExportResultCode, hrTimeToMicroseconds, } from '@opentelemetry/core';\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleSpanExporter = /** @class */ (function () {\n    function ConsoleSpanExporter() {\n    }\n    /**\n     * Export spans.\n     * @param spans\n     * @param resultCallback\n     */\n    ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n        return this._sendSpans(spans, resultCallback);\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    ConsoleSpanExporter.prototype.shutdown = function () {\n        this._sendSpans([]);\n        return this.forceFlush();\n    };\n    /**\n     * Exports any pending spans in exporter\n     */\n    ConsoleSpanExporter.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    /**\n     * converts span info into more readable format\n     * @param span\n     */\n    ConsoleSpanExporter.prototype._exportInfo = function (span) {\n        var _a;\n        return {\n            traceId: span.spanContext().traceId,\n            parentId: span.parentSpanId,\n            traceState: (_a = span.spanContext().traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n            name: span.name,\n            id: span.spanContext().spanId,\n            kind: span.kind,\n            timestamp: hrTimeToMicroseconds(span.startTime),\n            duration: hrTimeToMicroseconds(span.duration),\n            attributes: span.attributes,\n            status: span.status,\n            events: span.events,\n            links: span.links,\n        };\n    };\n    /**\n     * Showing spans in console\n     * @param spans\n     * @param done\n     */\n    ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n        var e_1, _a;\n        try {\n            for (var spans_1 = __values(spans), spans_1_1 = spans_1.next(); !spans_1_1.done; spans_1_1 = spans_1.next()) {\n                var span = spans_1_1.value;\n                console.dir(this._exportInfo(span), { depth: 3 });\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (spans_1_1 && !spans_1_1.done && (_a = spans_1.return)) _a.call(spans_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (done) {\n            return done({ code: ExportResultCode.SUCCESS });\n        }\n    };\n    return ConsoleSpanExporter;\n}());\nexport { ConsoleSpanExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}