{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { MappingError } from './types';\n/**\n * LogarithmMapping implements exponential mapping functions for scale > 0.\n * For scales <= 0 the exponent mapping should be used.\n */\nvar LogarithmMapping = /** @class */function () {\n  function LogarithmMapping(scale) {\n    this._scale = scale;\n    this._scaleFactor = util.ldexp(Math.LOG2E, scale);\n    this._inverseFactor = util.ldexp(Math.LN2, -scale);\n  }\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  LogarithmMapping.prototype.mapToIndex = function (value) {\n    if (value <= ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex() - 1;\n    }\n    // exact power of two special case\n    if (ieee754.getSignificand(value) === 0) {\n      var exp = ieee754.getNormalBase2(value);\n      return (exp << this._scale) - 1;\n    }\n    // non-power of two cases. use Math.floor to round the scaled logarithm\n    var index = Math.floor(Math.log(value) * this._scaleFactor);\n    var maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      return maxIndex;\n    }\n    return index;\n  };\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  LogarithmMapping.prototype.lowerBoundary = function (index) {\n    var maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      if (index === maxIndex) {\n        return 2 * Math.exp((index - (1 << this._scale)) / this._scaleFactor);\n      }\n      throw new MappingError(\"overflow: \" + index + \" is > maximum lower boundary: \" + maxIndex);\n    }\n    var minIndex = this._minNormalLowerBoundaryIndex();\n    if (index <= minIndex) {\n      if (index === minIndex) {\n        return ieee754.MIN_VALUE;\n      } else if (index === minIndex - 1) {\n        return Math.exp((index + (1 << this._scale)) / this._scaleFactor) / 2;\n      }\n      throw new MappingError(\"overflow: \" + index + \" is < minimum lower boundary: \" + minIndex);\n    }\n    return Math.exp(index * this._inverseFactor);\n  };\n  Object.defineProperty(LogarithmMapping.prototype, \"scale\", {\n    /**\n     * The scale used by this mapping\n     * @returns {number}\n     */\n    get: function () {\n      return this._scale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  LogarithmMapping.prototype._minNormalLowerBoundaryIndex = function () {\n    return ieee754.MIN_NORMAL_EXPONENT << this._scale;\n  };\n  LogarithmMapping.prototype._maxNormalLowerBoundaryIndex = function () {\n    return (ieee754.MAX_NORMAL_EXPONENT + 1 << this._scale) - 1;\n  };\n  return LogarithmMapping;\n}();\nexport { LogarithmMapping };","map":{"version":3,"names":["ieee754","util","MappingError","LogarithmMapping","scale","_scale","_scaleFactor","ldexp","Math","LOG2E","_inverseFactor","LN2","prototype","mapToIndex","value","MIN_VALUE","_minNormalLowerBoundaryIndex","getSignificand","exp","getNormalBase2","index","floor","log","maxIndex","_maxNormalLowerBoundaryIndex","lowerBoundary","minIndex","Object","defineProperty","get","enumerable","configurable","MIN_NORMAL_EXPONENT","MAX_NORMAL_EXPONENT"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/sdk-metrics/build/esm/aggregator/exponential-histogram/mapping/LogarithmMapping.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { MappingError } from './types';\n/**\n * LogarithmMapping implements exponential mapping functions for scale > 0.\n * For scales <= 0 the exponent mapping should be used.\n */\nvar LogarithmMapping = /** @class */ (function () {\n    function LogarithmMapping(scale) {\n        this._scale = scale;\n        this._scaleFactor = util.ldexp(Math.LOG2E, scale);\n        this._inverseFactor = util.ldexp(Math.LN2, -scale);\n    }\n    /**\n     * Maps positive floating point values to indexes corresponding to scale\n     * @param value\n     * @returns {number} index for provided value at the current scale\n     */\n    LogarithmMapping.prototype.mapToIndex = function (value) {\n        if (value <= ieee754.MIN_VALUE) {\n            return this._minNormalLowerBoundaryIndex() - 1;\n        }\n        // exact power of two special case\n        if (ieee754.getSignificand(value) === 0) {\n            var exp = ieee754.getNormalBase2(value);\n            return (exp << this._scale) - 1;\n        }\n        // non-power of two cases. use Math.floor to round the scaled logarithm\n        var index = Math.floor(Math.log(value) * this._scaleFactor);\n        var maxIndex = this._maxNormalLowerBoundaryIndex();\n        if (index >= maxIndex) {\n            return maxIndex;\n        }\n        return index;\n    };\n    /**\n     * Returns the lower bucket boundary for the given index for scale\n     *\n     * @param index\n     * @returns {number}\n     */\n    LogarithmMapping.prototype.lowerBoundary = function (index) {\n        var maxIndex = this._maxNormalLowerBoundaryIndex();\n        if (index >= maxIndex) {\n            if (index === maxIndex) {\n                return 2 * Math.exp((index - (1 << this._scale)) / this._scaleFactor);\n            }\n            throw new MappingError(\"overflow: \" + index + \" is > maximum lower boundary: \" + maxIndex);\n        }\n        var minIndex = this._minNormalLowerBoundaryIndex();\n        if (index <= minIndex) {\n            if (index === minIndex) {\n                return ieee754.MIN_VALUE;\n            }\n            else if (index === minIndex - 1) {\n                return Math.exp((index + (1 << this._scale)) / this._scaleFactor) / 2;\n            }\n            throw new MappingError(\"overflow: \" + index + \" is < minimum lower boundary: \" + minIndex);\n        }\n        return Math.exp(index * this._inverseFactor);\n    };\n    Object.defineProperty(LogarithmMapping.prototype, \"scale\", {\n        /**\n         * The scale used by this mapping\n         * @returns {number}\n         */\n        get: function () {\n            return this._scale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    LogarithmMapping.prototype._minNormalLowerBoundaryIndex = function () {\n        return ieee754.MIN_NORMAL_EXPONENT << this._scale;\n    };\n    LogarithmMapping.prototype._maxNormalLowerBoundaryIndex = function () {\n        return ((ieee754.MAX_NORMAL_EXPONENT + 1) << this._scale) - 1;\n    };\n    return LogarithmMapping;\n}());\nexport { LogarithmMapping };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}