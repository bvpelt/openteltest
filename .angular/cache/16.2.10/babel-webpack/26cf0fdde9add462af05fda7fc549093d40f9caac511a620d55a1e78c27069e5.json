{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { hexToBase64, hrTimeToNanoseconds } from '@opentelemetry/core';\nvar NANOSECONDS = BigInt(1000000000);\nexport function hrTimeToNanos(hrTime) {\n  return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);\n}\nexport function toLongBits(value) {\n  var low = Number(BigInt.asUintN(32, value));\n  var high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n  return {\n    low: low,\n    high: high\n  };\n}\nexport function encodeAsLongBits(hrTime) {\n  var nanos = hrTimeToNanos(hrTime);\n  return toLongBits(nanos);\n}\nexport function encodeAsString(hrTime) {\n  var nanos = hrTimeToNanos(hrTime);\n  return nanos.toString();\n}\nvar encodeTimestamp = typeof BigInt !== 'undefined' ? encodeAsString : hrTimeToNanoseconds;\nfunction identity(value) {\n  return value;\n}\nfunction optionalHexToBase64(str) {\n  if (str === undefined) return undefined;\n  return hexToBase64(str);\n}\nvar DEFAULT_ENCODER = {\n  encodeHrTime: encodeAsLongBits,\n  encodeSpanContext: hexToBase64,\n  encodeOptionalSpanContext: optionalHexToBase64\n};\nexport function getOtlpEncoder(options) {\n  var _a, _b;\n  if (options === undefined) {\n    return DEFAULT_ENCODER;\n  }\n  var useLongBits = (_a = options.useLongBits) !== null && _a !== void 0 ? _a : true;\n  var useHex = (_b = options.useHex) !== null && _b !== void 0 ? _b : false;\n  return {\n    encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n    encodeSpanContext: useHex ? identity : hexToBase64,\n    encodeOptionalSpanContext: useHex ? identity : optionalHexToBase64\n  };\n}","map":{"version":3,"names":["hexToBase64","hrTimeToNanoseconds","NANOSECONDS","BigInt","hrTimeToNanos","hrTime","toLongBits","value","low","Number","asUintN","high","encodeAsLongBits","nanos","encodeAsString","toString","encodeTimestamp","identity","optionalHexToBase64","str","undefined","DEFAULT_ENCODER","encodeHrTime","encodeSpanContext","encodeOptionalSpanContext","getOtlpEncoder","options","_a","_b","useLongBits","useHex"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/otlp-transformer/build/esm/common/index.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { hexToBase64, hrTimeToNanoseconds } from '@opentelemetry/core';\nvar NANOSECONDS = BigInt(1000000000);\nexport function hrTimeToNanos(hrTime) {\n    return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);\n}\nexport function toLongBits(value) {\n    var low = Number(BigInt.asUintN(32, value));\n    var high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n    return { low: low, high: high };\n}\nexport function encodeAsLongBits(hrTime) {\n    var nanos = hrTimeToNanos(hrTime);\n    return toLongBits(nanos);\n}\nexport function encodeAsString(hrTime) {\n    var nanos = hrTimeToNanos(hrTime);\n    return nanos.toString();\n}\nvar encodeTimestamp = typeof BigInt !== 'undefined' ? encodeAsString : hrTimeToNanoseconds;\nfunction identity(value) {\n    return value;\n}\nfunction optionalHexToBase64(str) {\n    if (str === undefined)\n        return undefined;\n    return hexToBase64(str);\n}\nvar DEFAULT_ENCODER = {\n    encodeHrTime: encodeAsLongBits,\n    encodeSpanContext: hexToBase64,\n    encodeOptionalSpanContext: optionalHexToBase64,\n};\nexport function getOtlpEncoder(options) {\n    var _a, _b;\n    if (options === undefined) {\n        return DEFAULT_ENCODER;\n    }\n    var useLongBits = (_a = options.useLongBits) !== null && _a !== void 0 ? _a : true;\n    var useHex = (_b = options.useHex) !== null && _b !== void 0 ? _b : false;\n    return {\n        encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n        encodeSpanContext: useHex ? identity : hexToBase64,\n        encodeOptionalSpanContext: useHex ? identity : optionalHexToBase64,\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,EAAEC,mBAAmB,QAAQ,qBAAqB;AACtE,IAAIC,WAAW,GAAGC,MAAM,CAAC,UAAU,CAAC;AACpC,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAE;EAClC,OAAOF,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGH,WAAW,GAAGC,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9D;AACA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAE;EAC9B,IAAIC,GAAG,GAAGC,MAAM,CAACN,MAAM,CAACO,OAAO,CAAC,EAAE,EAAEH,KAAK,CAAC,CAAC;EAC3C,IAAII,IAAI,GAAGF,MAAM,CAACN,MAAM,CAACO,OAAO,CAAC,EAAE,EAAEH,KAAK,IAAIJ,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1D,OAAO;IAAEK,GAAG,EAAEA,GAAG;IAAEG,IAAI,EAAEA;EAAK,CAAC;AACnC;AACA,OAAO,SAASC,gBAAgBA,CAACP,MAAM,EAAE;EACrC,IAAIQ,KAAK,GAAGT,aAAa,CAACC,MAAM,CAAC;EACjC,OAAOC,UAAU,CAACO,KAAK,CAAC;AAC5B;AACA,OAAO,SAASC,cAAcA,CAACT,MAAM,EAAE;EACnC,IAAIQ,KAAK,GAAGT,aAAa,CAACC,MAAM,CAAC;EACjC,OAAOQ,KAAK,CAACE,QAAQ,CAAC,CAAC;AAC3B;AACA,IAAIC,eAAe,GAAG,OAAOb,MAAM,KAAK,WAAW,GAAGW,cAAc,GAAGb,mBAAmB;AAC1F,SAASgB,QAAQA,CAACV,KAAK,EAAE;EACrB,OAAOA,KAAK;AAChB;AACA,SAASW,mBAAmBA,CAACC,GAAG,EAAE;EAC9B,IAAIA,GAAG,KAAKC,SAAS,EACjB,OAAOA,SAAS;EACpB,OAAOpB,WAAW,CAACmB,GAAG,CAAC;AAC3B;AACA,IAAIE,eAAe,GAAG;EAClBC,YAAY,EAAEV,gBAAgB;EAC9BW,iBAAiB,EAAEvB,WAAW;EAC9BwB,yBAAyB,EAAEN;AAC/B,CAAC;AACD,OAAO,SAASO,cAAcA,CAACC,OAAO,EAAE;EACpC,IAAIC,EAAE,EAAEC,EAAE;EACV,IAAIF,OAAO,KAAKN,SAAS,EAAE;IACvB,OAAOC,eAAe;EAC1B;EACA,IAAIQ,WAAW,GAAG,CAACF,EAAE,GAAGD,OAAO,CAACG,WAAW,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;EAClF,IAAIG,MAAM,GAAG,CAACF,EAAE,GAAGF,OAAO,CAACI,MAAM,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;EACzE,OAAO;IACHN,YAAY,EAAEO,WAAW,GAAGjB,gBAAgB,GAAGI,eAAe;IAC9DO,iBAAiB,EAAEO,MAAM,GAAGb,QAAQ,GAAGjB,WAAW;IAClDwB,yBAAyB,EAAEM,MAAM,GAAGb,QAAQ,GAAGC;EACnD,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}