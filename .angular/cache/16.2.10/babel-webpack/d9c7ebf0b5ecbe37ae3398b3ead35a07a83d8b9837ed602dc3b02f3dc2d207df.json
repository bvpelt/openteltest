{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\nvar contextApi = ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */function () {\n  function NoopTracer() {}\n  // startSpan starts a noop span.\n  NoopTracer.prototype.startSpan = function (name, options, context) {\n    if (context === void 0) {\n      context = contextApi.active();\n    }\n    var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n    var parentFromContext = context && getSpanContext(context);\n    if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  };\n  NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n    var opts;\n    var ctx;\n    var fn;\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n    var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n    var span = this.startSpan(name, opts, parentContext);\n    var contextWithSpanSet = setSpan(parentContext, span);\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  };\n  return NoopTracer;\n}();\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n  return typeof spanContext === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';\n}","map":{"version":3,"names":["ContextAPI","getSpanContext","setSpan","NonRecordingSpan","isSpanContextValid","contextApi","getInstance","NoopTracer","prototype","startSpan","name","options","context","active","root","Boolean","parentFromContext","isSpanContext","startActiveSpan","arg2","arg3","arg4","opts","ctx","fn","arguments","length","parentContext","span","contextWithSpanSet","with","undefined","spanContext"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\nvar contextApi = ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        if (context === void 0) { context = contextApi.active(); }\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan();\n        }\n        var parentFromContext = context && getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = setSpan(parentContext, span);\n        return contextApi.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,cAAc,EAAEC,OAAO,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,kBAAkB,QAAQ,qBAAqB;AACxD,IAAIC,UAAU,GAAGL,UAAU,CAACM,WAAW,CAAC,CAAC;AACzC;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC,SAASA,UAAUA,CAAA,EAAG,CACtB;EACA;EACAA,UAAU,CAACC,SAAS,CAACC,SAAS,GAAG,UAAUC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAE;IAC/D,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAGP,UAAU,CAACQ,MAAM,CAAC,CAAC;IAAE;IACzD,IAAIC,IAAI,GAAGC,OAAO,CAACJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACG,IAAI,CAAC;IAClF,IAAIA,IAAI,EAAE;MACN,OAAO,IAAIX,gBAAgB,CAAC,CAAC;IACjC;IACA,IAAIa,iBAAiB,GAAGJ,OAAO,IAAIX,cAAc,CAACW,OAAO,CAAC;IAC1D,IAAIK,aAAa,CAACD,iBAAiB,CAAC,IAChCZ,kBAAkB,CAACY,iBAAiB,CAAC,EAAE;MACvC,OAAO,IAAIb,gBAAgB,CAACa,iBAAiB,CAAC;IAClD,CAAC,MACI;MACD,OAAO,IAAIb,gBAAgB,CAAC,CAAC;IACjC;EACJ,CAAC;EACDI,UAAU,CAACC,SAAS,CAACU,eAAe,GAAG,UAAUR,IAAI,EAAES,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACrE,IAAIC,IAAI;IACR,IAAIC,GAAG;IACP,IAAIC,EAAE;IACN,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACtB;IACJ,CAAC,MACI,IAAID,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7BF,EAAE,GAAGL,IAAI;IACb,CAAC,MACI,IAAIM,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7BJ,IAAI,GAAGH,IAAI;MACXK,EAAE,GAAGJ,IAAI;IACb,CAAC,MACI;MACDE,IAAI,GAAGH,IAAI;MACXI,GAAG,GAAGH,IAAI;MACVI,EAAE,GAAGH,IAAI;IACb;IACA,IAAIM,aAAa,GAAGJ,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAGA,GAAG,GAAGlB,UAAU,CAACQ,MAAM,CAAC,CAAC;IAC9E,IAAIe,IAAI,GAAG,IAAI,CAACnB,SAAS,CAACC,IAAI,EAAEY,IAAI,EAAEK,aAAa,CAAC;IACpD,IAAIE,kBAAkB,GAAG3B,OAAO,CAACyB,aAAa,EAAEC,IAAI,CAAC;IACrD,OAAOvB,UAAU,CAACyB,IAAI,CAACD,kBAAkB,EAAEL,EAAE,EAAEO,SAAS,EAAEH,IAAI,CAAC;EACnE,CAAC;EACD,OAAOrB,UAAU;AACrB,CAAC,CAAC,CAAE;AACJ,SAASA,UAAU;AACnB,SAASU,aAAaA,CAACe,WAAW,EAAE;EAChC,OAAQ,OAAOA,WAAW,KAAK,QAAQ,IACnC,OAAOA,WAAW,CAAC,QAAQ,CAAC,KAAK,QAAQ,IACzC,OAAOA,WAAW,CAAC,SAAS,CAAC,KAAK,QAAQ,IAC1C,OAAOA,WAAW,CAAC,YAAY,CAAC,KAAK,QAAQ;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}