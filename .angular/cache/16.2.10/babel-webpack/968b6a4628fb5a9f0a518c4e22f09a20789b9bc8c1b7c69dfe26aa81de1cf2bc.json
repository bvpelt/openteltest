{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable import/no-extraneous-dependencies */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar opentracing = require(\"../index\");\nvar mock_context_1 = require(\"./mock_context\");\n/**\n * OpenTracing Span implementation designed for use in unit tests.\n */\nvar MockSpan = /** @class */function (_super) {\n  __extends(MockSpan, _super);\n  //------------------------------------------------------------------------//\n  // MockSpan-specific\n  //------------------------------------------------------------------------//\n  function MockSpan(tracer) {\n    var _this = _super.call(this) || this;\n    _this._mockTracer = tracer;\n    _this._uuid = _this._generateUUID();\n    _this._startMs = Date.now();\n    _this._finishMs = 0;\n    _this._operationName = '';\n    _this._tags = {};\n    _this._logs = [];\n    return _this;\n  }\n  //------------------------------------------------------------------------//\n  // OpenTracing implementation\n  //------------------------------------------------------------------------//\n  MockSpan.prototype._context = function () {\n    return new mock_context_1.default(this);\n  };\n  MockSpan.prototype._setOperationName = function (name) {\n    this._operationName = name;\n  };\n  MockSpan.prototype._addTags = function (set) {\n    var keys = Object.keys(set);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      this._tags[key] = set[key];\n    }\n  };\n  MockSpan.prototype._log = function (fields, timestamp) {\n    this._logs.push({\n      fields: fields,\n      timestamp: timestamp\n    });\n  };\n  MockSpan.prototype._finish = function (finishTime) {\n    this._finishMs = finishTime || Date.now();\n  };\n  MockSpan.prototype.uuid = function () {\n    return this._uuid;\n  };\n  MockSpan.prototype.operationName = function () {\n    return this._operationName;\n  };\n  MockSpan.prototype.durationMs = function () {\n    return this._finishMs - this._startMs;\n  };\n  MockSpan.prototype.tags = function () {\n    return this._tags;\n  };\n  MockSpan.prototype.tracer = function () {\n    return this._mockTracer;\n  };\n  MockSpan.prototype._generateUUID = function () {\n    var p0 = (\"00000000\" + Math.abs(Math.random() * 0xFFFFFFFF | 0).toString(16)).substr(-8);\n    var p1 = (\"00000000\" + Math.abs(Math.random() * 0xFFFFFFFF | 0).toString(16)).substr(-8);\n    return \"\" + p0 + p1;\n  };\n  MockSpan.prototype.addReference = function (ref) {};\n  /**\n   * Returns a simplified object better for console.log()'ing.\n   */\n  MockSpan.prototype.debug = function () {\n    var obj = {\n      uuid: this._uuid,\n      operation: this._operationName,\n      millis: [this._finishMs - this._startMs, this._startMs, this._finishMs]\n    };\n    if (Object.keys(this._tags).length) {\n      obj.tags = this._tags;\n    }\n    return obj;\n  };\n  return MockSpan;\n}(opentracing.Span);\nexports.MockSpan = MockSpan;\nexports.default = MockSpan;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","opentracing","require","mock_context_1","MockSpan","_super","tracer","_this","call","_mockTracer","_uuid","_generateUUID","_startMs","Date","now","_finishMs","_operationName","_tags","_logs","_context","default","_setOperationName","name","_addTags","set","keys","_i","keys_1","length","key","_log","fields","timestamp","push","_finish","finishTime","uuid","operationName","durationMs","tags","p0","Math","abs","random","toString","substr","p1","addReference","ref","debug","obj","operation","millis","Span"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/opentracing/lib/mock_tracer/mock_span.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable import/no-extraneous-dependencies */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar opentracing = require(\"../index\");\nvar mock_context_1 = require(\"./mock_context\");\n/**\n * OpenTracing Span implementation designed for use in unit tests.\n */\nvar MockSpan = /** @class */ (function (_super) {\n    __extends(MockSpan, _super);\n    //------------------------------------------------------------------------//\n    // MockSpan-specific\n    //------------------------------------------------------------------------//\n    function MockSpan(tracer) {\n        var _this = _super.call(this) || this;\n        _this._mockTracer = tracer;\n        _this._uuid = _this._generateUUID();\n        _this._startMs = Date.now();\n        _this._finishMs = 0;\n        _this._operationName = '';\n        _this._tags = {};\n        _this._logs = [];\n        return _this;\n    }\n    //------------------------------------------------------------------------//\n    // OpenTracing implementation\n    //------------------------------------------------------------------------//\n    MockSpan.prototype._context = function () {\n        return new mock_context_1.default(this);\n    };\n    MockSpan.prototype._setOperationName = function (name) {\n        this._operationName = name;\n    };\n    MockSpan.prototype._addTags = function (set) {\n        var keys = Object.keys(set);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            this._tags[key] = set[key];\n        }\n    };\n    MockSpan.prototype._log = function (fields, timestamp) {\n        this._logs.push({\n            fields: fields,\n            timestamp: timestamp\n        });\n    };\n    MockSpan.prototype._finish = function (finishTime) {\n        this._finishMs = finishTime || Date.now();\n    };\n    MockSpan.prototype.uuid = function () {\n        return this._uuid;\n    };\n    MockSpan.prototype.operationName = function () {\n        return this._operationName;\n    };\n    MockSpan.prototype.durationMs = function () {\n        return this._finishMs - this._startMs;\n    };\n    MockSpan.prototype.tags = function () {\n        return this._tags;\n    };\n    MockSpan.prototype.tracer = function () {\n        return this._mockTracer;\n    };\n    MockSpan.prototype._generateUUID = function () {\n        var p0 = (\"00000000\" + Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)).substr(-8);\n        var p1 = (\"00000000\" + Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)).substr(-8);\n        return \"\" + p0 + p1;\n    };\n    MockSpan.prototype.addReference = function (ref) {\n    };\n    /**\n     * Returns a simplified object better for console.log()'ing.\n     */\n    MockSpan.prototype.debug = function () {\n        var obj = {\n            uuid: this._uuid,\n            operation: this._operationName,\n            millis: [this._finishMs - this._startMs, this._startMs, this._finishMs]\n        };\n        if (Object.keys(this._tags).length) {\n            obj.tags = this._tags;\n        }\n        return obj;\n    };\n    return MockSpan;\n}(opentracing.Span));\nexports.MockSpan = MockSpan;\nexports.default = MockSpan;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}