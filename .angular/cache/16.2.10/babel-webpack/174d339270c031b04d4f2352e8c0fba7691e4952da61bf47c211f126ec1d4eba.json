{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * SpanContext represents Span state that must propagate to descendant Spans\n * and across process boundaries.\n *\n * SpanContext is logically divided into two pieces: the user-level \"Baggage\"\n * (see setBaggageItem and getBaggageItem) that propagates across Span\n * boundaries and any Tracer-implementation-specific fields that are needed to\n * identify or otherwise contextualize the associated Span instance (e.g., a\n * <trace_id, span_id, sampled> tuple).\n */\nvar SpanContext = /** @class */function () {\n  function SpanContext() {}\n  // The SpanContext is entirely implementation dependent\n  /**\n   * Returns a string representation of the implementation internal trace ID.\n   *\n   * @returns {string}\n   */\n  SpanContext.prototype.toTraceId = function () {\n    return '';\n  };\n  /**\n   * Returns a string representation of the implementation internal span ID.\n   *\n   * @returns {string}\n   */\n  SpanContext.prototype.toSpanId = function () {\n    return '';\n  };\n  return SpanContext;\n}();\nexports.SpanContext = SpanContext;\nexports.default = SpanContext;","map":{"version":3,"names":["Object","defineProperty","exports","value","SpanContext","prototype","toTraceId","toSpanId","default"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/opentracing/lib/span_context.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * SpanContext represents Span state that must propagate to descendant Spans\n * and across process boundaries.\n *\n * SpanContext is logically divided into two pieces: the user-level \"Baggage\"\n * (see setBaggageItem and getBaggageItem) that propagates across Span\n * boundaries and any Tracer-implementation-specific fields that are needed to\n * identify or otherwise contextualize the associated Span instance (e.g., a\n * <trace_id, span_id, sampled> tuple).\n */\nvar SpanContext = /** @class */ (function () {\n    function SpanContext() {\n    }\n    // The SpanContext is entirely implementation dependent\n    /**\n     * Returns a string representation of the implementation internal trace ID.\n     *\n     * @returns {string}\n     */\n    SpanContext.prototype.toTraceId = function () {\n        return '';\n    };\n    /**\n     * Returns a string representation of the implementation internal span ID.\n     *\n     * @returns {string}\n     */\n    SpanContext.prototype.toSpanId = function () {\n        return '';\n    };\n    return SpanContext;\n}());\nexports.SpanContext = SpanContext;\nexports.default = SpanContext;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,aAAe,YAAY;EACzC,SAASA,WAAWA,CAAA,EAAG,CACvB;EACA;EACA;AACJ;AACA;AACA;AACA;EACIA,WAAW,CAACC,SAAS,CAACC,SAAS,GAAG,YAAY;IAC1C,OAAO,EAAE;EACb,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIF,WAAW,CAACC,SAAS,CAACE,QAAQ,GAAG,YAAY;IACzC,OAAO,EAAE;EACb,CAAC;EACD,OAAOH,WAAW;AACtB,CAAC,CAAC,CAAE;AACJF,OAAO,CAACE,WAAW,GAAGA,WAAW;AACjCF,OAAO,CAACM,OAAO,GAAGJ,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}