{"ast":null,"code":"// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar TypedError = require('error/typed');\nmodule.exports.TypeIdMismatch = TypedError({\n  type: 'thrift-typeid-mismatch',\n  message: 'encoded {what} typeid {encoded} doesn\\'t match ' + 'expected type \"{expected}\" (id: {expectedId})',\n  encoded: null,\n  expected: null,\n  expectedId: null,\n  what: null\n});\nmodule.exports.MapKeyTypeIdMismatch = TypedError({\n  type: 'thrift-map-key-typeid-mismatch',\n  message: 'encoded map key typeid {encoded} doesn\\'t match ' + 'expected type \"{expected}\" (id: {expectedId})',\n  encoded: null,\n  expected: null,\n  expectedId: null\n});\nmodule.exports.MapValTypeIdMismatch = TypedError({\n  type: 'thrift-map-val-typeid-mismatch',\n  message: 'encoded map value typeid {encoded} doesn\\'t match ' + 'expected type \"{expected}\" (id: {expectedId})',\n  encoded: null,\n  expected: null,\n  expectedId: null\n});\nmodule.exports.InvalidSizeError = TypedError({\n  type: 'thrift-invalid-size',\n  message: 'invalid size {size} of {what}; expects non-negative number',\n  size: null,\n  what: null\n});\nmodule.exports.InvalidTypeidError = TypedError({\n  type: 'thrift-invalid-typeid',\n  message: 'invalid typeid {typeid} of {what}' + '; expects one of the values in TYPE',\n  typeid: null,\n  what: null\n});\nmodule.exports.UnexpectedFieldValueTypeidError = TypedError({\n  type: 'thrift-unexpected-field-value-typeid',\n  message: 'unexpected typeid {typeid} ({typeName}) for field \"{fieldName}\"' + ' with id {fieldId} on {structName};' + ' expected {expectedTypeid} ({expectedTypeName})',\n  typeid: null,\n  typeName: null,\n  expectedTypeid: null,\n  expectedTypeName: null,\n  fieldName: null,\n  fieldId: null,\n  structName: null\n});\nmodule.exports.FieldRequiredError = TypedError({\n  type: 'thrift-required-field',\n  message: 'missing required field \"{name}\" with id {id} on {structName}',\n  name: null,\n  id: null,\n  structName: null\n});\nmodule.exports.UnexpectedMapTypeAnnotation = TypedError({\n  type: 'thrift-unexpected-map-type-annotation',\n  message: 'unexpected map js.type annotation \"{mapType}\"',\n  mapType: null\n});\nmodule.exports.InvalidEnumerationTypeError = TypedError({\n  type: 'thrift-invalid-enumeration-type',\n  message: 'name must be a string for enumeration {enumName}, got: {name} ({nameType})',\n  enumName: null,\n  name: null,\n  nameType: null\n});\nmodule.exports.InvalidEnumerationNameError = TypedError({\n  type: 'thrift-invalid-enumeration-name',\n  message: 'name must be a valid member of enumeration {enumName}, got: {name}',\n  enumName: null,\n  name: null\n});\nmodule.exports.InvalidEnumerationValueError = TypedError({\n  type: 'thrift-invalid-enumeration-value',\n  message: 'value must be a valid member of enumeration {enumName}, got: {value}',\n  enumName: null,\n  value: null\n});\n\n// Thrift Message Envelope\n\nmodule.exports.UnrecognizedMessageEnvelopeVersion = TypedError({\n  type: 'thrift-unrecognized-message-envelope-version',\n  message: 'unrecognized Thrift message envelope version: {version}',\n  version: null\n});\nmodule.exports.UnrecognizedMessageEnvelopeType = TypedError({\n  type: 'thrift-unrecognized-message-envelope-type',\n  message: 'unrecognized Thrift message envelope type: {value}',\n  value: null\n});\nmodule.exports.InvalidMessageEnvelopeTypeName = TypedError({\n  type: 'thrift-invalid-message-envelope-type-name',\n  message: 'invalid Thrift message envelope type name: {name}',\n  name: null\n});","map":{"version":3,"names":["TypedError","require","module","exports","TypeIdMismatch","type","message","encoded","expected","expectedId","what","MapKeyTypeIdMismatch","MapValTypeIdMismatch","InvalidSizeError","size","InvalidTypeidError","typeid","UnexpectedFieldValueTypeidError","typeName","expectedTypeid","expectedTypeName","fieldName","fieldId","structName","FieldRequiredError","name","id","UnexpectedMapTypeAnnotation","mapType","InvalidEnumerationTypeError","enumName","nameType","InvalidEnumerationNameError","InvalidEnumerationValueError","value","UnrecognizedMessageEnvelopeVersion","version","UnrecognizedMessageEnvelopeType","InvalidMessageEnvelopeTypeName"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/thriftrw/errors.js"],"sourcesContent":["// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar TypedError = require('error/typed');\n\nmodule.exports.TypeIdMismatch = TypedError({\n    type: 'thrift-typeid-mismatch',\n    message: 'encoded {what} typeid {encoded} doesn\\'t match ' +\n        'expected type \"{expected}\" (id: {expectedId})',\n    encoded: null,\n    expected: null,\n    expectedId: null,\n    what: null\n});\n\nmodule.exports.MapKeyTypeIdMismatch = TypedError({\n    type: 'thrift-map-key-typeid-mismatch',\n    message: 'encoded map key typeid {encoded} doesn\\'t match ' +\n        'expected type \"{expected}\" (id: {expectedId})',\n    encoded: null,\n    expected: null,\n    expectedId: null\n});\n\nmodule.exports.MapValTypeIdMismatch = TypedError({\n    type: 'thrift-map-val-typeid-mismatch',\n    message: 'encoded map value typeid {encoded} doesn\\'t match ' +\n        'expected type \"{expected}\" (id: {expectedId})',\n    encoded: null,\n    expected: null,\n    expectedId: null\n});\n\nmodule.exports.InvalidSizeError = TypedError({\n    type: 'thrift-invalid-size',\n    message: 'invalid size {size} of {what}; expects non-negative number',\n    size: null,\n    what: null\n});\n\nmodule.exports.InvalidTypeidError = TypedError({\n    type: 'thrift-invalid-typeid',\n    message: 'invalid typeid {typeid} of {what}' +\n        '; expects one of the values in TYPE',\n    typeid: null,\n    what: null\n});\n\nmodule.exports.UnexpectedFieldValueTypeidError = TypedError({\n    type: 'thrift-unexpected-field-value-typeid',\n    message: 'unexpected typeid {typeid} ({typeName}) for field \"{fieldName}\"' +\n        ' with id {fieldId} on {structName};' +\n        ' expected {expectedTypeid} ({expectedTypeName})',\n    typeid: null,\n    typeName: null,\n    expectedTypeid: null,\n    expectedTypeName: null,\n    fieldName: null,\n    fieldId: null,\n    structName: null\n});\n\nmodule.exports.FieldRequiredError = TypedError({\n    type: 'thrift-required-field',\n    message: 'missing required field \"{name}\" with id {id} on {structName}',\n    name: null,\n    id: null,\n    structName: null\n});\n\nmodule.exports.UnexpectedMapTypeAnnotation = TypedError({\n    type: 'thrift-unexpected-map-type-annotation',\n    message: 'unexpected map js.type annotation \"{mapType}\"',\n    mapType: null\n});\n\nmodule.exports.InvalidEnumerationTypeError = TypedError({\n    type: 'thrift-invalid-enumeration-type',\n    message: 'name must be a string for enumeration {enumName}, got: {name} ({nameType})',\n    enumName: null,\n    name: null,\n    nameType: null\n});\n\nmodule.exports.InvalidEnumerationNameError = TypedError({\n    type: 'thrift-invalid-enumeration-name',\n    message: 'name must be a valid member of enumeration {enumName}, got: {name}',\n    enumName: null,\n    name: null\n});\n\nmodule.exports.InvalidEnumerationValueError = TypedError({\n    type: 'thrift-invalid-enumeration-value',\n    message: 'value must be a valid member of enumeration {enumName}, got: {value}',\n    enumName: null,\n    value: null\n});\n\n// Thrift Message Envelope\n\nmodule.exports.UnrecognizedMessageEnvelopeVersion = TypedError({\n    type: 'thrift-unrecognized-message-envelope-version',\n    message: 'unrecognized Thrift message envelope version: {version}',\n    version: null\n});\n\nmodule.exports.UnrecognizedMessageEnvelopeType = TypedError({\n    type: 'thrift-unrecognized-message-envelope-type',\n    message: 'unrecognized Thrift message envelope type: {value}',\n    value: null\n});\n\nmodule.exports.InvalidMessageEnvelopeTypeName = TypedError({\n    type: 'thrift-invalid-message-envelope-type-name',\n    message: 'invalid Thrift message envelope type name: {name}',\n    name: null\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}