{"ast":null,"code":"'use strict';\n\nvar extend = require('xtend/mutable');\nvar assert = require('assert');\nvar TypedError = require('./typed.js');\nvar objectToString = Object.prototype.toString;\nvar ERROR_TYPE = '[object Error]';\nvar causeMessageRegex = /\\{causeMessage\\}/g;\nvar origMessageRegex = /\\{origMessage\\}/g;\nmodule.exports = WrappedError;\nfunction WrappedError(options) {\n  assert(options, 'WrappedError: must specify options');\n  assert(options.type, 'WrappedError: must specify type');\n  assert(options.message, 'WrappedError: must specify message');\n  assert(!has(options, 'cause'), 'WrappedError: cause field is reserved');\n  assert(!has(options, 'fullType'), 'WrappedError: fullType field is reserved');\n  assert(!has(options, 'causeMessage'), 'WrappedError: causeMessage field is reserved');\n  assert(!has(options, 'origMessage'), 'WrappedError: origMessage field is reserved');\n  var createTypedError = TypedError(options);\n  extend(createError, options);\n  createError._name = options.name;\n  return createError;\n  function createError(cause, opts) {\n    /*eslint max-statements: [2, 25]*/\n    assert(cause, 'an error is required');\n    assert(isError(cause), 'WrappedError: first argument must be an error');\n    var causeMessage = cause.message;\n    if (causeMessage.indexOf('{causeMessage}') >= 0) {\n      // recover\n      causeMessage = causeMessage.replace(causeMessageRegex, '$INVALID_CAUSE_MESSAGE_LITERAL');\n    }\n    if (causeMessage.indexOf('{origMessage}') >= 0) {\n      causeMessage = causeMessage.replace(origMessageRegex, '$INVALID_ORIG_MESSAGE_LITERAL');\n    }\n    var nodeCause = false;\n    var errOptions = extend({}, opts, {\n      causeMessage: causeMessage,\n      origMessage: causeMessage\n    });\n    if (has(cause, 'code') && !has(errOptions, 'code')) {\n      errOptions.code = cause.code;\n    }\n    if (has(cause, 'errno') && !has(errOptions, 'errno')) {\n      errOptions.errno = cause.errno;\n      nodeCause = true;\n    }\n    if (has(cause, 'syscall') && !has(errOptions, 'syscall')) {\n      errOptions.syscall = cause.syscall;\n      nodeCause = true;\n    }\n    var causeType = cause.type;\n    if (!causeType && nodeCause) {\n      causeType = 'error.wrapped-io.' + (cause.syscall || 'unknown') + '.' + (cause.errno || 'unknown');\n    } else {\n      causeType = 'error.wrapped-unknown';\n    }\n    errOptions.fullType = options.type + '~!~' + (cause.fullType || cause.type || causeType);\n    var err = createTypedError(errOptions);\n    Object.defineProperty(err, 'cause', {\n      value: cause,\n      configurable: true,\n      enumerable: false\n    });\n    return err;\n  }\n}\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction isError(err) {\n  return objectToString.call(err) === ERROR_TYPE;\n}","map":{"version":3,"names":["extend","require","assert","TypedError","objectToString","Object","prototype","toString","ERROR_TYPE","causeMessageRegex","origMessageRegex","module","exports","WrappedError","options","type","message","has","createTypedError","createError","_name","name","cause","opts","isError","causeMessage","indexOf","replace","nodeCause","errOptions","origMessage","code","errno","syscall","causeType","fullType","err","defineProperty","value","configurable","enumerable","obj","key","hasOwnProperty","call"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/error/wrapped.js"],"sourcesContent":["'use strict';\n\nvar extend = require('xtend/mutable');\nvar assert = require('assert');\n\nvar TypedError = require('./typed.js');\n\nvar objectToString = Object.prototype.toString;\nvar ERROR_TYPE = '[object Error]';\nvar causeMessageRegex = /\\{causeMessage\\}/g;\nvar origMessageRegex = /\\{origMessage\\}/g;\n\nmodule.exports = WrappedError;\n\nfunction WrappedError(options) {\n    assert(options, 'WrappedError: must specify options');\n    assert(options.type, 'WrappedError: must specify type');\n    assert(options.message, 'WrappedError: must specify message');\n\n    assert(!has(options, 'cause'),\n        'WrappedError: cause field is reserved');\n    assert(!has(options, 'fullType'),\n        'WrappedError: fullType field is reserved');\n    assert(!has(options, 'causeMessage'),\n        'WrappedError: causeMessage field is reserved');\n    assert(!has(options, 'origMessage'),\n        'WrappedError: origMessage field is reserved');\n\n    var createTypedError = TypedError(options);\n    extend(createError, options);\n    createError._name = options.name;\n\n    return createError;\n\n    function createError(cause, opts) {\n        /*eslint max-statements: [2, 25]*/\n        assert(cause, 'an error is required');\n        assert(isError(cause),\n            'WrappedError: first argument must be an error');\n\n        var causeMessage = cause.message;\n        if (causeMessage.indexOf('{causeMessage}') >= 0) {\n            // recover\n            causeMessage = causeMessage.replace(\n                causeMessageRegex,\n                '$INVALID_CAUSE_MESSAGE_LITERAL'\n            );\n        }\n        if (causeMessage.indexOf('{origMessage}') >= 0) {\n            causeMessage = causeMessage.replace(\n                origMessageRegex,\n                '$INVALID_ORIG_MESSAGE_LITERAL'\n            );\n        }\n\n        var nodeCause = false;\n        var errOptions = extend({}, opts, {\n            causeMessage: causeMessage,\n            origMessage: causeMessage\n        });\n\n        if (has(cause, 'code') && !has(errOptions, 'code')) {\n            errOptions.code = cause.code;\n        }\n\n        if (has(cause, 'errno') && !has(errOptions, 'errno')) {\n            errOptions.errno = cause.errno;\n            nodeCause = true;\n        }\n\n        if (has(cause, 'syscall') && !has(errOptions, 'syscall')) {\n            errOptions.syscall = cause.syscall;\n            nodeCause = true;\n        }\n\n        var causeType = cause.type;\n        if (!causeType && nodeCause) {\n            causeType = 'error.wrapped-io.' +\n                (cause.syscall || 'unknown') + '.' +\n                (cause.errno || 'unknown');\n        } else {\n            causeType = 'error.wrapped-unknown';\n        }\n\n        errOptions.fullType = options.type + '~!~' +\n            (cause.fullType || cause.type || causeType);\n\n        var err = createTypedError(errOptions);\n\n        Object.defineProperty(err, 'cause', {\n            value: cause,\n            configurable: true,\n            enumerable: false\n        });\n        return err;\n    }\n}\n\nfunction has(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction isError(err) {\n    return objectToString.call(err) === ERROR_TYPE;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}