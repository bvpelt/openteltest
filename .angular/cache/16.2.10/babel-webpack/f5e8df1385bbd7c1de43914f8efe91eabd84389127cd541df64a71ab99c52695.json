{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, ValueType } from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument } from './Instruments';\n/**\n * The class implements {@link ObservableResult} interface.\n */\nvar ObservableResultImpl = /** @class */function () {\n  function ObservableResultImpl(_instrumentName, _valueType) {\n    this._instrumentName = _instrumentName;\n    this._valueType = _valueType;\n    /**\n     * @internal\n     */\n    this._buffer = new AttributeHashMap();\n  }\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  ObservableResultImpl.prototype.observe = function (value, attributes) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\"non-number value provided to metric \" + this._instrumentName + \": \" + value);\n      return;\n    }\n    if (this._valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\"INT value type cannot accept a floating-point value for \" + this._instrumentName + \", ignoring the fractional digits.\");\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._buffer.set(attributes, value);\n  };\n  return ObservableResultImpl;\n}();\nexport { ObservableResultImpl };\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nvar BatchObservableResultImpl = /** @class */function () {\n  function BatchObservableResultImpl() {\n    /**\n     * @internal\n     */\n    this._buffer = new Map();\n  }\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  BatchObservableResultImpl.prototype.observe = function (metric, value, attributes) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n    if (!isObservableInstrument(metric)) {\n      return;\n    }\n    var map = this._buffer.get(metric);\n    if (map == null) {\n      map = new AttributeHashMap();\n      this._buffer.set(metric, map);\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\"non-number value provided to metric \" + metric._descriptor.name + \": \" + value);\n      return;\n    }\n    if (metric._descriptor.valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\"INT value type cannot accept a floating-point value for \" + metric._descriptor.name + \", ignoring the fractional digits.\");\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    map.set(attributes, value);\n  };\n  return BatchObservableResultImpl;\n}();\nexport { BatchObservableResultImpl };","map":{"version":3,"names":["diag","ValueType","AttributeHashMap","isObservableInstrument","ObservableResultImpl","_instrumentName","_valueType","_buffer","prototype","observe","value","attributes","warn","INT","Number","isInteger","Math","trunc","set","BatchObservableResultImpl","Map","metric","map","get","_descriptor","name","valueType"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/sdk-metrics/build/esm/ObservableResult.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, ValueType, } from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument } from './Instruments';\n/**\n * The class implements {@link ObservableResult} interface.\n */\nvar ObservableResultImpl = /** @class */ (function () {\n    function ObservableResultImpl(_instrumentName, _valueType) {\n        this._instrumentName = _instrumentName;\n        this._valueType = _valueType;\n        /**\n         * @internal\n         */\n        this._buffer = new AttributeHashMap();\n    }\n    /**\n     * Observe a measurement of the value associated with the given attributes.\n     */\n    ObservableResultImpl.prototype.observe = function (value, attributes) {\n        if (attributes === void 0) { attributes = {}; }\n        if (typeof value !== 'number') {\n            diag.warn(\"non-number value provided to metric \" + this._instrumentName + \": \" + value);\n            return;\n        }\n        if (this._valueType === ValueType.INT && !Number.isInteger(value)) {\n            diag.warn(\"INT value type cannot accept a floating-point value for \" + this._instrumentName + \", ignoring the fractional digits.\");\n            value = Math.trunc(value);\n            // ignore non-finite values.\n            if (!Number.isInteger(value)) {\n                return;\n            }\n        }\n        this._buffer.set(attributes, value);\n    };\n    return ObservableResultImpl;\n}());\nexport { ObservableResultImpl };\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nvar BatchObservableResultImpl = /** @class */ (function () {\n    function BatchObservableResultImpl() {\n        /**\n         * @internal\n         */\n        this._buffer = new Map();\n    }\n    /**\n     * Observe a measurement of the value associated with the given attributes.\n     */\n    BatchObservableResultImpl.prototype.observe = function (metric, value, attributes) {\n        if (attributes === void 0) { attributes = {}; }\n        if (!isObservableInstrument(metric)) {\n            return;\n        }\n        var map = this._buffer.get(metric);\n        if (map == null) {\n            map = new AttributeHashMap();\n            this._buffer.set(metric, map);\n        }\n        if (typeof value !== 'number') {\n            diag.warn(\"non-number value provided to metric \" + metric._descriptor.name + \": \" + value);\n            return;\n        }\n        if (metric._descriptor.valueType === ValueType.INT &&\n            !Number.isInteger(value)) {\n            diag.warn(\"INT value type cannot accept a floating-point value for \" + metric._descriptor.name + \", ignoring the fractional digits.\");\n            value = Math.trunc(value);\n            // ignore non-finite values.\n            if (!Number.isInteger(value)) {\n                return;\n            }\n        }\n        map.set(attributes, value);\n    };\n    return BatchObservableResultImpl;\n}());\nexport { BatchObservableResultImpl };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}