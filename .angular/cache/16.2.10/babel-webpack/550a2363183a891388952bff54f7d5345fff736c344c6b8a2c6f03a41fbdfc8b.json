{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '..';\nimport { diag } from '@opentelemetry/api';\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nvar BrowserDetectorSync = /** @class */function () {\n  function BrowserDetectorSync() {}\n  BrowserDetectorSync.prototype.detect = function (config) {\n    var _a;\n    var isBrowser = typeof navigator !== 'undefined';\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    var browserResource = (_a = {}, _a[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser', _a[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = 'Web Browser', _a[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = navigator.userAgent, _a);\n    return this._getResourceAttributes(browserResource, config);\n  };\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  BrowserDetectorSync.prototype._getResourceAttributes = function (browserResource, _config) {\n    if (browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug('BrowserDetector failed: Unable to find required browser resources. ');\n      return Resource.empty();\n    } else {\n      return new Resource(__assign({}, browserResource));\n    }\n  };\n  return BrowserDetectorSync;\n}();\nexport var browserDetectorSync = new BrowserDetectorSync();","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","SemanticResourceAttributes","Resource","diag","BrowserDetectorSync","detect","config","_a","isBrowser","navigator","empty","browserResource","PROCESS_RUNTIME_NAME","PROCESS_RUNTIME_DESCRIPTION","PROCESS_RUNTIME_VERSION","userAgent","_getResourceAttributes","_config","debug","browserDetectorSync"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '..';\nimport { diag } from '@opentelemetry/api';\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nvar BrowserDetectorSync = /** @class */ (function () {\n    function BrowserDetectorSync() {\n    }\n    BrowserDetectorSync.prototype.detect = function (config) {\n        var _a;\n        var isBrowser = typeof navigator !== 'undefined';\n        if (!isBrowser) {\n            return Resource.empty();\n        }\n        var browserResource = (_a = {},\n            _a[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser',\n            _a[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = 'Web Browser',\n            _a[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = navigator.userAgent,\n            _a);\n        return this._getResourceAttributes(browserResource, config);\n    };\n    /**\n     * Validates process resource attribute map from process variables\n     *\n     * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n     * @param config: Config\n     * @returns The sanitized resource attributes.\n     */\n    BrowserDetectorSync.prototype._getResourceAttributes = function (browserResource, _config) {\n        if (browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === '') {\n            diag.debug('BrowserDetector failed: Unable to find required browser resources. ');\n            return Resource.empty();\n        }\n        else {\n            return new Resource(__assign({}, browserResource));\n        }\n    };\n    return BrowserDetectorSync;\n}());\nexport var browserDetectorSync = new BrowserDetectorSync();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,SAASO,0BAA0B,QAAQ,qCAAqC;AAChF,SAASC,QAAQ,QAAQ,IAAI;AAC7B,SAASC,IAAI,QAAQ,oBAAoB;AACzC;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,aAAe,YAAY;EACjD,SAASA,mBAAmBA,CAAA,EAAG,CAC/B;EACAA,mBAAmB,CAACP,SAAS,CAACQ,MAAM,GAAG,UAAUC,MAAM,EAAE;IACrD,IAAIC,EAAE;IACN,IAAIC,SAAS,GAAG,OAAOC,SAAS,KAAK,WAAW;IAChD,IAAI,CAACD,SAAS,EAAE;MACZ,OAAON,QAAQ,CAACQ,KAAK,CAAC,CAAC;IAC3B;IACA,IAAIC,eAAe,IAAIJ,EAAE,GAAG,CAAC,CAAC,EAC1BA,EAAE,CAACN,0BAA0B,CAACW,oBAAoB,CAAC,GAAG,SAAS,EAC/DL,EAAE,CAACN,0BAA0B,CAACY,2BAA2B,CAAC,GAAG,aAAa,EAC1EN,EAAE,CAACN,0BAA0B,CAACa,uBAAuB,CAAC,GAAGL,SAAS,CAACM,SAAS,EAC5ER,EAAE,CAAC;IACP,OAAO,IAAI,CAACS,sBAAsB,CAACL,eAAe,EAAEL,MAAM,CAAC;EAC/D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIF,mBAAmB,CAACP,SAAS,CAACmB,sBAAsB,GAAG,UAAUL,eAAe,EAAEM,OAAO,EAAE;IACvF,IAAIN,eAAe,CAACV,0BAA0B,CAACa,uBAAuB,CAAC,KAAK,EAAE,EAAE;MAC5EX,IAAI,CAACe,KAAK,CAAC,qEAAqE,CAAC;MACjF,OAAOhB,QAAQ,CAACQ,KAAK,CAAC,CAAC;IAC3B,CAAC,MACI;MACD,OAAO,IAAIR,QAAQ,CAACf,QAAQ,CAAC,CAAC,CAAC,EAAEwB,eAAe,CAAC,CAAC;IACtD;EACJ,CAAC;EACD,OAAOP,mBAAmB;AAC9B,CAAC,CAAC,CAAE;AACJ,OAAO,IAAIe,mBAAmB,GAAG,IAAIf,mBAAmB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}