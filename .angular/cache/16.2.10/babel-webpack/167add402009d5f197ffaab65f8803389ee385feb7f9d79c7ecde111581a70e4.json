{"ast":null,"code":"// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar TypedError = require('error/typed');\nvar WrappedError = require('error/wrapped');\nmodule.exports.expected = function expected(got, descr) {\n  return module.exports.InvalidArgument({\n    expected: descr,\n    argType: typeof got,\n    argConstructor: got && got.constructor.name\n  });\n};\nmodule.exports.BrokenReaderState = TypedError({\n  type: 'bufrw.broken-reader-state',\n  message: 'reader in invalid state {state} expecting {expecting} avail {aval}',\n  state: null,\n  expecting: null,\n  avail: null\n});\nmodule.exports.FixedLengthMismatch = TypedError({\n  type: 'bufrw.fixed-length-mismatch',\n  message: 'supplied length {got} mismatches fixed length {expected}',\n  expected: null,\n  got: null\n});\nmodule.exports.RangeError = TypedError({\n  type: 'bufrw.range-error',\n  message: 'value {value} out of range, min: {min} max: {max}',\n  value: null,\n  min: null,\n  max: null\n});\nmodule.exports.InvalidArgument = TypedError({\n  type: 'bufrw.invalid-argument',\n  message: 'invalid argument, expected {expected}',\n  expected: null,\n  argType: null,\n  argConstructor: null\n});\nmodule.exports.ReadInvalidSwitchValue = TypedError({\n  type: 'bufrw.read.invalid-switch-value',\n  message: 'read invalid switch value {value}',\n  value: null\n});\nmodule.exports.WriteInvalidSwitchValue = TypedError({\n  type: 'bufrw.write.invalid-switch-value',\n  message: 'write invalid switch value {value}',\n  value: null\n});\nmodule.exports.MissingStructField = TypedError({\n  type: 'bufrw.missing.struct-field',\n  message: 'missing field {field} on {struct}',\n  field: null,\n  struct: null\n});\nmodule.exports.ShortBuffer = TypedError({\n  type: 'bufrw.short-buffer',\n  message: 'expected at least {expected} bytes, only have {actual} @{offset}',\n  expected: null,\n  actual: null,\n  buffer: null,\n  offset: null\n});\nmodule.exports.ShortBufferRanged = TypedError({\n  type: 'bufrw.short-buffer',\n  message: 'expected at least {expected} bytes, only have {actual} @[{offset}:{endOffset}]',\n  expected: null,\n  actual: null,\n  offset: null,\n  endOffset: null\n});\nmodule.exports.ShortRead = TypedError({\n  type: 'bufrw.short-read',\n  message: 'short read, {remaining} byte left over after consuming {offset}',\n  remaining: null,\n  buffer: null,\n  offset: null\n});\nmodule.exports.ShortWrite = TypedError({\n  type: 'bufrw.short-write',\n  message: 'short write, {remaining} byte left over after writing {offset}',\n  remaining: null,\n  buffer: null,\n  offset: null\n});\nmodule.exports.TruncatedRead = TypedError({\n  type: 'bufrw.truncated-read',\n  message: 'read truncated by end of stream with {length} bytes in buffer',\n  length: null,\n  buffer: null,\n  state: null,\n  expecting: null\n});\nmodule.exports.UnstableRW = WrappedError({\n  type: 'bufrw.unstable-rw',\n  message: 'Unstable RW error: {origMessage} (other: {otherMessage})',\n  otherMessage: null\n});\nmodule.exports.ZeroLengthChunk = TypedError({\n  type: 'bufrw.zero-length-chunk',\n  message: 'zero length chunk encountered'\n});\nmodule.exports.classify = classify;\nfunction classify(err) {\n  switch (err.type) {\n    case 'bufrw.broken-reader-state':\n    case 'bufrw.unstable-rw':\n      return 'Internal';\n    case 'bufrw.invalid-argument':\n    case 'bufrw.read.invalid-switch-value':\n    case 'bufrw.short-buffer':\n    case 'bufrw.short-read':\n    case 'bufrw.truncated-read':\n    case 'bufrw.zero-length-chunk':\n      return 'Read';\n    case 'bufrw.fixed-length-mismatch':\n    case 'bufrw.missing.struct-field':\n    case 'bufrw.range-error':\n    case 'bufrw.short-write':\n    case 'bufrw.write.invalid-switch-value':\n      return 'Write';\n\n    // istanbul ignore next\n    default:\n      return null;\n  }\n}","map":{"version":3,"names":["TypedError","require","WrappedError","module","exports","expected","got","descr","InvalidArgument","argType","argConstructor","constructor","name","BrokenReaderState","type","message","state","expecting","avail","FixedLengthMismatch","RangeError","value","min","max","ReadInvalidSwitchValue","WriteInvalidSwitchValue","MissingStructField","field","struct","ShortBuffer","actual","buffer","offset","ShortBufferRanged","endOffset","ShortRead","remaining","ShortWrite","TruncatedRead","length","UnstableRW","otherMessage","ZeroLengthChunk","classify","err"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/bufrw/errors.js"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar TypedError = require('error/typed');\nvar WrappedError = require('error/wrapped');\n\nmodule.exports.expected = function expected(got, descr) {\n    return module.exports.InvalidArgument({\n        expected: descr,\n        argType: typeof got,\n        argConstructor: got && got.constructor.name\n    });\n};\n\nmodule.exports.BrokenReaderState = TypedError({\n    type: 'bufrw.broken-reader-state',\n    message: 'reader in invalid state {state} expecting {expecting} avail {aval}',\n    state: null,\n    expecting: null,\n    avail: null\n});\n\nmodule.exports.FixedLengthMismatch = TypedError({\n    type: 'bufrw.fixed-length-mismatch',\n    message: 'supplied length {got} mismatches fixed length {expected}',\n    expected: null,\n    got: null\n});\n\nmodule.exports.RangeError = TypedError({\n    type: 'bufrw.range-error',\n    message: 'value {value} out of range, min: {min} max: {max}',\n    value: null,\n    min: null,\n    max: null\n});\n\nmodule.exports.InvalidArgument = TypedError({\n    type: 'bufrw.invalid-argument',\n    message: 'invalid argument, expected {expected}',\n    expected: null,\n    argType: null,\n    argConstructor: null\n});\n\nmodule.exports.ReadInvalidSwitchValue = TypedError({\n    type: 'bufrw.read.invalid-switch-value',\n    message: 'read invalid switch value {value}',\n    value: null\n});\n\nmodule.exports.WriteInvalidSwitchValue = TypedError({\n    type: 'bufrw.write.invalid-switch-value',\n    message: 'write invalid switch value {value}',\n    value: null\n});\n\nmodule.exports.MissingStructField = TypedError({\n    type: 'bufrw.missing.struct-field',\n    message: 'missing field {field} on {struct}',\n    field: null,\n    struct: null\n});\n\nmodule.exports.ShortBuffer = TypedError({\n    type: 'bufrw.short-buffer',\n    message: 'expected at least {expected} bytes, only have {actual} @{offset}',\n    expected: null,\n    actual: null,\n    buffer: null,\n    offset: null\n});\n\nmodule.exports.ShortBufferRanged = TypedError({\n    type: 'bufrw.short-buffer',\n    message: 'expected at least {expected} bytes, only have {actual} @[{offset}:{endOffset}]',\n    expected: null,\n    actual: null,\n    offset: null,\n    endOffset: null\n});\n\nmodule.exports.ShortRead = TypedError({\n    type: 'bufrw.short-read',\n    message: 'short read, {remaining} byte left over after consuming {offset}',\n    remaining: null,\n    buffer: null,\n    offset: null\n});\n\nmodule.exports.ShortWrite = TypedError({\n    type: 'bufrw.short-write',\n    message: 'short write, {remaining} byte left over after writing {offset}',\n    remaining: null,\n    buffer: null,\n    offset: null\n});\n\nmodule.exports.TruncatedRead = TypedError({\n    type: 'bufrw.truncated-read',\n    message: 'read truncated by end of stream with {length} bytes in buffer',\n    length: null,\n    buffer: null,\n    state: null,\n    expecting: null\n});\n\nmodule.exports.UnstableRW = WrappedError({\n    type: 'bufrw.unstable-rw',\n    message: 'Unstable RW error: {origMessage} (other: {otherMessage})',\n    otherMessage: null\n});\n\nmodule.exports.ZeroLengthChunk = TypedError({\n    type: 'bufrw.zero-length-chunk',\n    message: 'zero length chunk encountered'\n});\n\nmodule.exports.classify = classify;\n\nfunction classify(err) {\n    switch (err.type) {\n        case 'bufrw.broken-reader-state':\n        case 'bufrw.unstable-rw':\n            return 'Internal';\n\n        case 'bufrw.invalid-argument':\n        case 'bufrw.read.invalid-switch-value':\n        case 'bufrw.short-buffer':\n        case 'bufrw.short-read':\n        case 'bufrw.truncated-read':\n        case 'bufrw.zero-length-chunk':\n            return 'Read';\n\n        case 'bufrw.fixed-length-mismatch':\n        case 'bufrw.missing.struct-field':\n        case 'bufrw.range-error':\n        case 'bufrw.short-write':\n        case 'bufrw.write.invalid-switch-value':\n            return 'Write';\n\n        // istanbul ignore next\n        default:\n            return null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}