{"ast":null,"code":"import { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { WebTracerProvider, ConsoleSpanExporter, SimpleSpanProcessor, BatchSpanProcessor } from '@opentelemetry/sdk-trace-web';\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\nconst provider = new WebTracerProvider();\nconst options = {\n  tags: [],\n  // You can use the default UDPSender\n  //host: 'localhost', // optional\n  //port: 6832, // optional\n  // OR you can use the HTTPSender as follows\n  // endpoint: 'http://localhost:14268/api/traces',\n  maxPacketSize: 65000 // optional\n};\n\nconst exporter = new JaegerExporter(options);\n// For demo purposes only, immediately log traces to the console\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n// Batch traces before sending them to HoneyComb\nprovider.addSpanProcessor(new BatchSpanProcessor(new OTLPTraceExporter({\n  url: 'http://localhost:4318/v1/traces',\n  headers: {\n    'Access-Control-Allow-Origin': '*',\n    'Content-Type': 'application/x-protobuf'\n  }\n})));\nprovider.register({\n  contextManager: new ZoneContextManager()\n});\nregisterInstrumentations({\n  instrumentations: [getWebAutoInstrumentations({\n    '@opentelemetry/instrumentation-document-load': {},\n    '@opentelemetry/instrumentation-user-interaction': {},\n    '@opentelemetry/instrumentation-fetch': {},\n    '@opentelemetry/instrumentation-xml-http-request': {}\n  })]\n});","map":{"version":3,"names":["registerInstrumentations","WebTracerProvider","ConsoleSpanExporter","SimpleSpanProcessor","BatchSpanProcessor","getWebAutoInstrumentations","OTLPTraceExporter","ZoneContextManager","JaegerExporter","provider","options","tags","maxPacketSize","exporter","addSpanProcessor","url","headers","register","contextManager","instrumentations"],"sources":["/home/bvpelt/Develop/openteltest/src/instrument.ts"],"sourcesContent":["import { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport {\n    WebTracerProvider,\n    ConsoleSpanExporter,\n    SimpleSpanProcessor,\n    BatchSpanProcessor,\n} from '@opentelemetry/sdk-trace-web';\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\n\nconst provider = new WebTracerProvider();\n\nconst options = {\n  tags: [], // optional\n  // You can use the default UDPSender\n  //host: 'localhost', // optional\n  //port: 6832, // optional\n  // OR you can use the HTTPSender as follows\n  // endpoint: 'http://localhost:14268/api/traces',\n  maxPacketSize: 65000 // optional\n}\nconst exporter = new JaegerExporter(options);\n\n// For demo purposes only, immediately log traces to the console\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n\n// Batch traces before sending them to HoneyComb\nprovider.addSpanProcessor(\n    new BatchSpanProcessor(\n        new OTLPTraceExporter({\n            url: 'http://localhost:4318/v1/traces',\n            headers: {\n              'Access-Control-Allow-Origin': '*',\n              'Content-Type': 'application/x-protobuf'\n          },\n        }),\n    ),\n);\n\nprovider.register({\n  contextManager: new ZoneContextManager(),\n});\n\n\nregisterInstrumentations({\n    instrumentations: [\n        getWebAutoInstrumentations({\n            '@opentelemetry/instrumentation-document-load': {},\n            '@opentelemetry/instrumentation-user-interaction': {},\n            '@opentelemetry/instrumentation-fetch': {},\n            '@opentelemetry/instrumentation-xml-http-request': {},\n        }),\n    ],\n});\n\n\n\n\n\n\n\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,gCAAgC;AACzE,SACIC,iBAAiB,EACjBC,mBAAmB,EACnBC,mBAAmB,EACnBC,kBAAkB,QACf,8BAA8B;AACrC,SAASC,0BAA0B,QAAQ,0CAA0C;AACrF,SAASC,iBAAiB,QAAQ,yCAAyC;AAC3E,SAASC,kBAAkB,QAAQ,6BAA6B;AAChE,SAASC,cAAc,QAAQ,gCAAgC;AAE/D,MAAMC,QAAQ,GAAG,IAAIR,iBAAiB,EAAE;AAExC,MAAMS,OAAO,GAAG;EACdC,IAAI,EAAE,EAAE;EACR;EACA;EACA;EACA;EACA;EACAC,aAAa,EAAE,KAAK,CAAC;CACtB;;AACD,MAAMC,QAAQ,GAAG,IAAIL,cAAc,CAACE,OAAO,CAAC;AAE5C;AACAD,QAAQ,CAACK,gBAAgB,CAAC,IAAIX,mBAAmB,CAAC,IAAID,mBAAmB,EAAE,CAAC,CAAC;AAE7E;AACAO,QAAQ,CAACK,gBAAgB,CACrB,IAAIV,kBAAkB,CAClB,IAAIE,iBAAiB,CAAC;EAClBS,GAAG,EAAE,iCAAiC;EACtCC,OAAO,EAAE;IACP,6BAA6B,EAAE,GAAG;IAClC,cAAc,EAAE;;CAErB,CAAC,CACL,CACJ;AAEDP,QAAQ,CAACQ,QAAQ,CAAC;EAChBC,cAAc,EAAE,IAAIX,kBAAkB;CACvC,CAAC;AAGFP,wBAAwB,CAAC;EACrBmB,gBAAgB,EAAE,CACdd,0BAA0B,CAAC;IACvB,8CAA8C,EAAE,EAAE;IAClD,iDAAiD,EAAE,EAAE;IACrD,sCAAsC,EAAE,EAAE;IAC1C,iDAAiD,EAAE;GACtD,CAAC;CAET,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}