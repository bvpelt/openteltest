{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { diag, metrics, trace } from '@opentelemetry/api';\nimport * as shimmer from 'shimmer';\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nvar InstrumentationAbstract = /** @class */function () {\n  function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this.instrumentationName = instrumentationName;\n    this.instrumentationVersion = instrumentationVersion;\n    /* Api to wrap instrumented method */\n    this._wrap = shimmer.wrap;\n    /* Api to unwrap instrumented methods */\n    this._unwrap = shimmer.unwrap;\n    /* Api to mass wrap instrumented method */\n    this._massWrap = shimmer.massWrap;\n    /* Api to mass unwrap instrumented methods */\n    this._massUnwrap = shimmer.massUnwrap;\n    this._config = __assign({\n      enabled: true\n    }, config);\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName\n    });\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n  Object.defineProperty(InstrumentationAbstract.prototype, \"meter\", {\n    /* Returns meter */\n    get: function () {\n      return this._meter;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {\n    this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n    this._updateMetricInstruments();\n  };\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  InstrumentationAbstract.prototype._updateMetricInstruments = function () {\n    return;\n  };\n  /* Returns InstrumentationConfig */\n  InstrumentationAbstract.prototype.getConfig = function () {\n    return this._config;\n  };\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param InstrumentationConfig\n   */\n  InstrumentationAbstract.prototype.setConfig = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this._config = Object.assign({}, config);\n  };\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {\n    this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n  };\n  Object.defineProperty(InstrumentationAbstract.prototype, \"tracer\", {\n    /* Returns tracer */\n    get: function () {\n      return this._tracer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return InstrumentationAbstract;\n}();\nexport { InstrumentationAbstract };","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","diag","metrics","trace","shimmer","InstrumentationAbstract","instrumentationName","instrumentationVersion","config","_wrap","wrap","_unwrap","unwrap","_massWrap","massWrap","_massUnwrap","massUnwrap","_config","enabled","_diag","createComponentLogger","namespace","_tracer","getTracer","_meter","getMeter","_updateMetricInstruments","defineProperty","get","enumerable","configurable","setMeterProvider","meterProvider","getConfig","setConfig","setTracerProvider","tracerProvider"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { diag, metrics, trace, } from '@opentelemetry/api';\nimport * as shimmer from 'shimmer';\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nvar InstrumentationAbstract = /** @class */ (function () {\n    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {\n        if (config === void 0) { config = {}; }\n        this.instrumentationName = instrumentationName;\n        this.instrumentationVersion = instrumentationVersion;\n        /* Api to wrap instrumented method */\n        this._wrap = shimmer.wrap;\n        /* Api to unwrap instrumented methods */\n        this._unwrap = shimmer.unwrap;\n        /* Api to mass wrap instrumented method */\n        this._massWrap = shimmer.massWrap;\n        /* Api to mass unwrap instrumented methods */\n        this._massUnwrap = shimmer.massUnwrap;\n        this._config = __assign({ enabled: true }, config);\n        this._diag = diag.createComponentLogger({\n            namespace: instrumentationName,\n        });\n        this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n        this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n        this._updateMetricInstruments();\n    }\n    Object.defineProperty(InstrumentationAbstract.prototype, \"meter\", {\n        /* Returns meter */\n        get: function () {\n            return this._meter;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets MeterProvider to this plugin\n     * @param meterProvider\n     */\n    InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {\n        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n        this._updateMetricInstruments();\n    };\n    /**\n     * Sets the new metric instruments with the current Meter.\n     */\n    InstrumentationAbstract.prototype._updateMetricInstruments = function () {\n        return;\n    };\n    /* Returns InstrumentationConfig */\n    InstrumentationAbstract.prototype.getConfig = function () {\n        return this._config;\n    };\n    /**\n     * Sets InstrumentationConfig to this plugin\n     * @param InstrumentationConfig\n     */\n    InstrumentationAbstract.prototype.setConfig = function (config) {\n        if (config === void 0) { config = {}; }\n        this._config = Object.assign({}, config);\n    };\n    /**\n     * Sets TraceProvider to this plugin\n     * @param tracerProvider\n     */\n    InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {\n        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n    };\n    Object.defineProperty(InstrumentationAbstract.prototype, \"tracer\", {\n        /* Returns tracer */\n        get: function () {\n            return this._tracer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return InstrumentationAbstract;\n}());\nexport { InstrumentationAbstract };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}