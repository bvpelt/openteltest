{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ValueType, diag } from '@opentelemetry/api';\nimport { equalsCaseInsensitive } from './utils';\n/**\n * Supported types of metric instruments.\n */\nexport var InstrumentType;\n(function (InstrumentType) {\n  InstrumentType[\"COUNTER\"] = \"COUNTER\";\n  InstrumentType[\"HISTOGRAM\"] = \"HISTOGRAM\";\n  InstrumentType[\"UP_DOWN_COUNTER\"] = \"UP_DOWN_COUNTER\";\n  InstrumentType[\"OBSERVABLE_COUNTER\"] = \"OBSERVABLE_COUNTER\";\n  InstrumentType[\"OBSERVABLE_GAUGE\"] = \"OBSERVABLE_GAUGE\";\n  InstrumentType[\"OBSERVABLE_UP_DOWN_COUNTER\"] = \"OBSERVABLE_UP_DOWN_COUNTER\";\n})(InstrumentType || (InstrumentType = {}));\nexport function createInstrumentDescriptor(name, type, options) {\n  var _a, _b, _c, _d;\n  if (!isValidName(name)) {\n    diag.warn(\"Invalid metric name: \\\"\" + name + \"\\\". The metric name should be a ASCII string with a length no greater than 255 characters.\");\n  }\n  return {\n    name: name,\n    type: type,\n    description: (_a = options === null || options === void 0 ? void 0 : options.description) !== null && _a !== void 0 ? _a : '',\n    unit: (_b = options === null || options === void 0 ? void 0 : options.unit) !== null && _b !== void 0 ? _b : '',\n    valueType: (_c = options === null || options === void 0 ? void 0 : options.valueType) !== null && _c !== void 0 ? _c : ValueType.DOUBLE,\n    advice: (_d = options === null || options === void 0 ? void 0 : options.advice) !== null && _d !== void 0 ? _d : {}\n  };\n}\nexport function createInstrumentDescriptorWithView(view, instrument) {\n  var _a, _b;\n  return {\n    name: (_a = view.name) !== null && _a !== void 0 ? _a : instrument.name,\n    description: (_b = view.description) !== null && _b !== void 0 ? _b : instrument.description,\n    type: instrument.type,\n    unit: instrument.unit,\n    valueType: instrument.valueType,\n    advice: instrument.advice\n  };\n}\nexport function isDescriptorCompatibleWith(descriptor, otherDescriptor) {\n  // Names are case-insensitive strings.\n  return equalsCaseInsensitive(descriptor.name, otherDescriptor.name) && descriptor.unit === otherDescriptor.unit && descriptor.type === otherDescriptor.type && descriptor.valueType === otherDescriptor.valueType;\n}\n// ASCII string with a length no greater than 255 characters.\n// NB: the first character counted separately from the rest.\nvar NAME_REGEXP = /^[a-z][a-z0-9_.\\-/]{0,254}$/i;\nexport function isValidName(name) {\n  return name.match(NAME_REGEXP) != null;\n}","map":{"version":3,"names":["ValueType","diag","equalsCaseInsensitive","InstrumentType","createInstrumentDescriptor","name","type","options","_a","_b","_c","_d","isValidName","warn","description","unit","valueType","DOUBLE","advice","createInstrumentDescriptorWithView","view","instrument","isDescriptorCompatibleWith","descriptor","otherDescriptor","NAME_REGEXP","match"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/sdk-metrics/build/esm/InstrumentDescriptor.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ValueType, diag } from '@opentelemetry/api';\nimport { equalsCaseInsensitive } from './utils';\n/**\n * Supported types of metric instruments.\n */\nexport var InstrumentType;\n(function (InstrumentType) {\n    InstrumentType[\"COUNTER\"] = \"COUNTER\";\n    InstrumentType[\"HISTOGRAM\"] = \"HISTOGRAM\";\n    InstrumentType[\"UP_DOWN_COUNTER\"] = \"UP_DOWN_COUNTER\";\n    InstrumentType[\"OBSERVABLE_COUNTER\"] = \"OBSERVABLE_COUNTER\";\n    InstrumentType[\"OBSERVABLE_GAUGE\"] = \"OBSERVABLE_GAUGE\";\n    InstrumentType[\"OBSERVABLE_UP_DOWN_COUNTER\"] = \"OBSERVABLE_UP_DOWN_COUNTER\";\n})(InstrumentType || (InstrumentType = {}));\nexport function createInstrumentDescriptor(name, type, options) {\n    var _a, _b, _c, _d;\n    if (!isValidName(name)) {\n        diag.warn(\"Invalid metric name: \\\"\" + name + \"\\\". The metric name should be a ASCII string with a length no greater than 255 characters.\");\n    }\n    return {\n        name: name,\n        type: type,\n        description: (_a = options === null || options === void 0 ? void 0 : options.description) !== null && _a !== void 0 ? _a : '',\n        unit: (_b = options === null || options === void 0 ? void 0 : options.unit) !== null && _b !== void 0 ? _b : '',\n        valueType: (_c = options === null || options === void 0 ? void 0 : options.valueType) !== null && _c !== void 0 ? _c : ValueType.DOUBLE,\n        advice: (_d = options === null || options === void 0 ? void 0 : options.advice) !== null && _d !== void 0 ? _d : {},\n    };\n}\nexport function createInstrumentDescriptorWithView(view, instrument) {\n    var _a, _b;\n    return {\n        name: (_a = view.name) !== null && _a !== void 0 ? _a : instrument.name,\n        description: (_b = view.description) !== null && _b !== void 0 ? _b : instrument.description,\n        type: instrument.type,\n        unit: instrument.unit,\n        valueType: instrument.valueType,\n        advice: instrument.advice,\n    };\n}\nexport function isDescriptorCompatibleWith(descriptor, otherDescriptor) {\n    // Names are case-insensitive strings.\n    return (equalsCaseInsensitive(descriptor.name, otherDescriptor.name) &&\n        descriptor.unit === otherDescriptor.unit &&\n        descriptor.type === otherDescriptor.type &&\n        descriptor.valueType === otherDescriptor.valueType);\n}\n// ASCII string with a length no greater than 255 characters.\n// NB: the first character counted separately from the rest.\nvar NAME_REGEXP = /^[a-z][a-z0-9_.\\-/]{0,254}$/i;\nexport function isValidName(name) {\n    return name.match(NAME_REGEXP) != null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}