{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// TODO: Move mock-tracer to its own NPM package once it is complete and tested.\nvar opentracing = require(\"../index\");\nvar mock_report_1 = require(\"./mock_report\");\nvar mock_span_1 = require(\"./mock_span\");\n/**\n * OpenTracing Tracer implementation designed for use in unit tests.\n */\nvar MockTracer = /** @class */function (_super) {\n  __extends(MockTracer, _super);\n  //------------------------------------------------------------------------//\n  // MockTracer-specific\n  //------------------------------------------------------------------------//\n  function MockTracer() {\n    var _this = _super.call(this) || this;\n    _this._spans = [];\n    return _this;\n  }\n  //------------------------------------------------------------------------//\n  // OpenTracing implementation\n  //------------------------------------------------------------------------//\n  MockTracer.prototype._startSpan = function (name, fields) {\n    // _allocSpan is given it's own method so that derived classes can\n    // allocate any type of object they want, but not have to duplicate\n    // the other common logic in startSpan().\n    var span = this._allocSpan();\n    span.setOperationName(name);\n    this._spans.push(span);\n    if (fields.references) {\n      for (var _i = 0, _a = fields.references; _i < _a.length; _i++) {\n        var ref = _a[_i];\n        span.addReference(ref);\n      }\n    }\n    // Capture the stack at the time the span started\n    span._startStack = new Error().stack;\n    return span;\n  };\n  MockTracer.prototype._inject = function (span, format, carrier) {\n    throw new Error('NOT YET IMPLEMENTED');\n  };\n  MockTracer.prototype._extract = function (format, carrier) {\n    throw new Error('NOT YET IMPLEMENTED');\n  };\n  MockTracer.prototype._allocSpan = function () {\n    return new mock_span_1.default(this);\n  };\n  /**\n   * Discard any buffered data.\n   */\n  MockTracer.prototype.clear = function () {\n    this._spans = [];\n  };\n  /**\n   * Return the buffered data in a format convenient for making unit test\n   * assertions.\n   */\n  MockTracer.prototype.report = function () {\n    return new mock_report_1.default(this._spans);\n  };\n  return MockTracer;\n}(opentracing.Tracer);\nexports.MockTracer = MockTracer;\nexports.default = MockTracer;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","opentracing","require","mock_report_1","mock_span_1","MockTracer","_super","_this","call","_spans","_startSpan","name","fields","span","_allocSpan","setOperationName","push","references","_i","_a","length","ref","addReference","_startStack","Error","stack","_inject","format","carrier","_extract","default","clear","report","Tracer"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/opentracing/lib/mock_tracer/mock_tracer.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// TODO: Move mock-tracer to its own NPM package once it is complete and tested.\nvar opentracing = require(\"../index\");\nvar mock_report_1 = require(\"./mock_report\");\nvar mock_span_1 = require(\"./mock_span\");\n/**\n * OpenTracing Tracer implementation designed for use in unit tests.\n */\nvar MockTracer = /** @class */ (function (_super) {\n    __extends(MockTracer, _super);\n    //------------------------------------------------------------------------//\n    // MockTracer-specific\n    //------------------------------------------------------------------------//\n    function MockTracer() {\n        var _this = _super.call(this) || this;\n        _this._spans = [];\n        return _this;\n    }\n    //------------------------------------------------------------------------//\n    // OpenTracing implementation\n    //------------------------------------------------------------------------//\n    MockTracer.prototype._startSpan = function (name, fields) {\n        // _allocSpan is given it's own method so that derived classes can\n        // allocate any type of object they want, but not have to duplicate\n        // the other common logic in startSpan().\n        var span = this._allocSpan();\n        span.setOperationName(name);\n        this._spans.push(span);\n        if (fields.references) {\n            for (var _i = 0, _a = fields.references; _i < _a.length; _i++) {\n                var ref = _a[_i];\n                span.addReference(ref);\n            }\n        }\n        // Capture the stack at the time the span started\n        span._startStack = new Error().stack;\n        return span;\n    };\n    MockTracer.prototype._inject = function (span, format, carrier) {\n        throw new Error('NOT YET IMPLEMENTED');\n    };\n    MockTracer.prototype._extract = function (format, carrier) {\n        throw new Error('NOT YET IMPLEMENTED');\n    };\n    MockTracer.prototype._allocSpan = function () {\n        return new mock_span_1.default(this);\n    };\n    /**\n     * Discard any buffered data.\n     */\n    MockTracer.prototype.clear = function () {\n        this._spans = [];\n    };\n    /**\n     * Return the buffered data in a format convenient for making unit test\n     * assertions.\n     */\n    MockTracer.prototype.report = function () {\n        return new mock_report_1.default(this._spans);\n    };\n    return MockTracer;\n}(opentracing.Tracer));\nexports.MockTracer = MockTracer;\nexports.default = MockTracer;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,CAAC,CAAC,CAAC;EACxF,CAAC;AACL,CAAC,CAAE,CAAC;AACJN,MAAM,CAACU,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,UAAU,CAAC;AACrC,IAAIC,aAAa,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC5C,IAAIE,WAAW,GAAGF,OAAO,CAAC,aAAa,CAAC;AACxC;AACA;AACA;AACA,IAAIG,UAAU,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC9CtB,SAAS,CAACqB,UAAU,EAAEC,MAAM,CAAC;EAC7B;EACA;EACA;EACA,SAASD,UAAUA,CAAA,EAAG;IAClB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,MAAM,GAAG,EAAE;IACjB,OAAOF,KAAK;EAChB;EACA;EACA;EACA;EACAF,UAAU,CAACT,SAAS,CAACc,UAAU,GAAG,UAAUC,IAAI,EAAEC,MAAM,EAAE;IACtD;IACA;IACA;IACA,IAAIC,IAAI,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IAC5BD,IAAI,CAACE,gBAAgB,CAACJ,IAAI,CAAC;IAC3B,IAAI,CAACF,MAAM,CAACO,IAAI,CAACH,IAAI,CAAC;IACtB,IAAID,MAAM,CAACK,UAAU,EAAE;MACnB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGP,MAAM,CAACK,UAAU,EAAEC,EAAE,GAAGC,EAAE,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;QAC3D,IAAIG,GAAG,GAAGF,EAAE,CAACD,EAAE,CAAC;QAChBL,IAAI,CAACS,YAAY,CAACD,GAAG,CAAC;MAC1B;IACJ;IACA;IACAR,IAAI,CAACU,WAAW,GAAG,IAAIC,KAAK,CAAC,CAAC,CAACC,KAAK;IACpC,OAAOZ,IAAI;EACf,CAAC;EACDR,UAAU,CAACT,SAAS,CAAC8B,OAAO,GAAG,UAAUb,IAAI,EAAEc,MAAM,EAAEC,OAAO,EAAE;IAC5D,MAAM,IAAIJ,KAAK,CAAC,qBAAqB,CAAC;EAC1C,CAAC;EACDnB,UAAU,CAACT,SAAS,CAACiC,QAAQ,GAAG,UAAUF,MAAM,EAAEC,OAAO,EAAE;IACvD,MAAM,IAAIJ,KAAK,CAAC,qBAAqB,CAAC;EAC1C,CAAC;EACDnB,UAAU,CAACT,SAAS,CAACkB,UAAU,GAAG,YAAY;IAC1C,OAAO,IAAIV,WAAW,CAAC0B,OAAO,CAAC,IAAI,CAAC;EACxC,CAAC;EACD;AACJ;AACA;EACIzB,UAAU,CAACT,SAAS,CAACmC,KAAK,GAAG,YAAY;IACrC,IAAI,CAACtB,MAAM,GAAG,EAAE;EACpB,CAAC;EACD;AACJ;AACA;AACA;EACIJ,UAAU,CAACT,SAAS,CAACoC,MAAM,GAAG,YAAY;IACtC,OAAO,IAAI7B,aAAa,CAAC2B,OAAO,CAAC,IAAI,CAACrB,MAAM,CAAC;EACjD,CAAC;EACD,OAAOJ,UAAU;AACrB,CAAC,CAACJ,WAAW,CAACgC,MAAM,CAAE;AACtBlC,OAAO,CAACM,UAAU,GAAGA,UAAU;AAC/BN,OAAO,CAAC+B,OAAO,GAAGzB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}