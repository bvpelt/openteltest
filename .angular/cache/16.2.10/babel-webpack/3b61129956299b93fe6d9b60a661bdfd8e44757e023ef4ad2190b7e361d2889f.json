{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nvar EnvDetectorSync = /** @class */function () {\n  function EnvDetectorSync() {\n    // Type, attribute keys, and attribute values should not exceed 256 characters.\n    this._MAX_LENGTH = 255;\n    // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n    this._COMMA_SEPARATOR = ',';\n    // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n    this._LABEL_KEY_VALUE_SPLITTER = '=';\n    this._ERROR_MESSAGE_INVALID_CHARS = 'should be a ASCII string with a length greater than 0 and not exceed ' + this._MAX_LENGTH + ' characters.';\n    this._ERROR_MESSAGE_INVALID_VALUE = 'should be a ASCII string with a length not exceed ' + this._MAX_LENGTH + ' characters.';\n  }\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  EnvDetectorSync.prototype.detect = function (_config) {\n    var attributes = {};\n    var env = getEnv();\n    var rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    var serviceName = env.OTEL_SERVICE_NAME;\n    if (rawAttributes) {\n      try {\n        var parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(\"EnvDetector failed: \" + e.message);\n      }\n    }\n    if (serviceName) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n    return new Resource(attributes);\n  };\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespaces, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  EnvDetectorSync.prototype._parseResourceAttributes = function (rawEnvAttributes) {\n    var e_1, _a;\n    if (!rawEnvAttributes) return {};\n    var attributes = {};\n    var rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);\n    try {\n      for (var rawAttributes_1 = __values(rawAttributes), rawAttributes_1_1 = rawAttributes_1.next(); !rawAttributes_1_1.done; rawAttributes_1_1 = rawAttributes_1.next()) {\n        var rawAttribute = rawAttributes_1_1.value;\n        var keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);\n        if (keyValuePair.length !== 2) {\n          continue;\n        }\n        var _b = __read(keyValuePair, 2),\n          key = _b[0],\n          value = _b[1];\n        // Leading and trailing whitespaces are trimmed.\n        key = key.trim();\n        value = value.trim().split(/^\"|\"$/).join('');\n        if (!this._isValidAndNotEmpty(key)) {\n          throw new Error(\"Attribute key \" + this._ERROR_MESSAGE_INVALID_CHARS);\n        }\n        if (!this._isValid(value)) {\n          throw new Error(\"Attribute value \" + this._ERROR_MESSAGE_INVALID_VALUE);\n        }\n        attributes[key] = decodeURIComponent(value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (rawAttributes_1_1 && !rawAttributes_1_1.done && (_a = rawAttributes_1.return)) _a.call(rawAttributes_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return attributes;\n  };\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  EnvDetectorSync.prototype._isValid = function (name) {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  };\n  // https://www.w3.org/TR/baggage/#definition\n  EnvDetectorSync.prototype._isBaggageOctetString = function (str) {\n    for (var i = 0; i < str.length; i++) {\n      var ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  EnvDetectorSync.prototype._isValidAndNotEmpty = function (str) {\n    return str.length > 0 && this._isValid(str);\n  };\n  return EnvDetectorSync;\n}();\nexport var envDetectorSync = new EnvDetectorSync();","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","ar","e","push","error","diag","getEnv","SemanticResourceAttributes","Resource","EnvDetectorSync","_MAX_LENGTH","_COMMA_SEPARATOR","_LABEL_KEY_VALUE_SPLITTER","_ERROR_MESSAGE_INVALID_CHARS","_ERROR_MESSAGE_INVALID_VALUE","prototype","detect","_config","attributes","env","rawAttributes","OTEL_RESOURCE_ATTRIBUTES","serviceName","OTEL_SERVICE_NAME","parsedAttributes","_parseResourceAttributes","Object","assign","debug","message","SERVICE_NAME","rawEnvAttributes","e_1","_a","split","rawAttributes_1","rawAttributes_1_1","rawAttribute","keyValuePair","_b","key","trim","join","_isValidAndNotEmpty","Error","_isValid","decodeURIComponent","e_1_1","return","name","_isBaggageOctetString","str","ch","charCodeAt","envDetectorSync"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nvar EnvDetectorSync = /** @class */ (function () {\n    function EnvDetectorSync() {\n        // Type, attribute keys, and attribute values should not exceed 256 characters.\n        this._MAX_LENGTH = 255;\n        // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n        this._COMMA_SEPARATOR = ',';\n        // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n        this._LABEL_KEY_VALUE_SPLITTER = '=';\n        this._ERROR_MESSAGE_INVALID_CHARS = 'should be a ASCII string with a length greater than 0 and not exceed ' +\n            this._MAX_LENGTH +\n            ' characters.';\n        this._ERROR_MESSAGE_INVALID_VALUE = 'should be a ASCII string with a length not exceed ' +\n            this._MAX_LENGTH +\n            ' characters.';\n    }\n    /**\n     * Returns a {@link Resource} populated with attributes from the\n     * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n     * function to conform to the Detector interface.\n     *\n     * @param config The resource detection config\n     */\n    EnvDetectorSync.prototype.detect = function (_config) {\n        var attributes = {};\n        var env = getEnv();\n        var rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n        var serviceName = env.OTEL_SERVICE_NAME;\n        if (rawAttributes) {\n            try {\n                var parsedAttributes = this._parseResourceAttributes(rawAttributes);\n                Object.assign(attributes, parsedAttributes);\n            }\n            catch (e) {\n                diag.debug(\"EnvDetector failed: \" + e.message);\n            }\n        }\n        if (serviceName) {\n            attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n        }\n        return new Resource(attributes);\n    };\n    /**\n     * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n     * variable.\n     *\n     * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n     * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n     * paths are accepted as attribute keys. Values may be quoted or unquoted in\n     * general. If a value contains whitespaces, =, or \" characters, it must\n     * always be quoted.\n     *\n     * @param rawEnvAttributes The resource attributes as a comma-seperated list\n     * of key/value pairs.\n     * @returns The sanitized resource attributes.\n     */\n    EnvDetectorSync.prototype._parseResourceAttributes = function (rawEnvAttributes) {\n        var e_1, _a;\n        if (!rawEnvAttributes)\n            return {};\n        var attributes = {};\n        var rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);\n        try {\n            for (var rawAttributes_1 = __values(rawAttributes), rawAttributes_1_1 = rawAttributes_1.next(); !rawAttributes_1_1.done; rawAttributes_1_1 = rawAttributes_1.next()) {\n                var rawAttribute = rawAttributes_1_1.value;\n                var keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);\n                if (keyValuePair.length !== 2) {\n                    continue;\n                }\n                var _b = __read(keyValuePair, 2), key = _b[0], value = _b[1];\n                // Leading and trailing whitespaces are trimmed.\n                key = key.trim();\n                value = value.trim().split(/^\"|\"$/).join('');\n                if (!this._isValidAndNotEmpty(key)) {\n                    throw new Error(\"Attribute key \" + this._ERROR_MESSAGE_INVALID_CHARS);\n                }\n                if (!this._isValid(value)) {\n                    throw new Error(\"Attribute value \" + this._ERROR_MESSAGE_INVALID_VALUE);\n                }\n                attributes[key] = decodeURIComponent(value);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (rawAttributes_1_1 && !rawAttributes_1_1.done && (_a = rawAttributes_1.return)) _a.call(rawAttributes_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return attributes;\n    };\n    /**\n     * Determines whether the given String is a valid printable ASCII string with\n     * a length not exceed _MAX_LENGTH characters.\n     *\n     * @param str The String to be validated.\n     * @returns Whether the String is valid.\n     */\n    EnvDetectorSync.prototype._isValid = function (name) {\n        return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n    };\n    // https://www.w3.org/TR/baggage/#definition\n    EnvDetectorSync.prototype._isBaggageOctetString = function (str) {\n        for (var i = 0; i < str.length; i++) {\n            var ch = str.charCodeAt(i);\n            if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Determines whether the given String is a valid printable ASCII string with\n     * a length greater than 0 and not exceed _MAX_LENGTH characters.\n     *\n     * @param str The String to be validated.\n     * @returns Whether the String is valid and not empty.\n     */\n    EnvDetectorSync.prototype._isValidAndNotEmpty = function (str) {\n        return str.length > 0 && this._isValid(str);\n    };\n    return EnvDetectorSync;\n}());\nexport var envDetectorSync = new EnvDetectorSync();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}