{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nvar DEFAULT_TRACE_TIMEOUT = 10000;\nexport var DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport var DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport var DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport var DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(partialHeaders) {\n  if (partialHeaders === void 0) {\n    partialHeaders = {};\n  }\n  var headers = {};\n  Object.entries(partialHeaders).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n    }\n  });\n  return headers;\n}\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url, path) {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url) {\n  try {\n    var parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch (_a) {\n    diag.warn(\"Could not parse export URL: '\" + url + \"'\");\n    return url;\n  }\n}\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(timeoutMillis) {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\nfunction getExporterTimeoutFromEnv() {\n  var _a;\n  var definedTimeout = Number((_a = getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) !== null && _a !== void 0 ? _a : getEnv().OTEL_EXPORTER_OTLP_TIMEOUT);\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(timeout, defaultTimeout) {\n  diag.warn('Timeout must be greater than 0', timeout);\n  return defaultTimeout;\n}\nexport function isExportRetryable(statusCode) {\n  var retryCodes = [429, 502, 503, 504];\n  return retryCodes.includes(statusCode);\n}\nexport function parseRetryAfterToMills(retryAfter) {\n  if (retryAfter == null) {\n    return -1;\n  }\n  var seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  var delay = new Date(retryAfter).getTime() - Date.now();\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","diag","getEnv","DEFAULT_TRACE_TIMEOUT","DEFAULT_EXPORT_MAX_ATTEMPTS","DEFAULT_EXPORT_INITIAL_BACKOFF","DEFAULT_EXPORT_MAX_BACKOFF","DEFAULT_EXPORT_BACKOFF_MULTIPLIER","parseHeaders","partialHeaders","headers","Object","entries","forEach","_a","_b","key","String","warn","appendResourcePathToUrl","url","path","endsWith","appendRootPathToUrlIfNeeded","parsedUrl","URL","pathname","toString","configureExporterTimeout","timeoutMillis","invalidTimeout","getExporterTimeoutFromEnv","definedTimeout","Number","OTEL_EXPORTER_OTLP_TRACES_TIMEOUT","OTEL_EXPORTER_OTLP_TIMEOUT","timeout","defaultTimeout","isExportRetryable","statusCode","retryCodes","includes","parseRetryAfterToMills","retryAfter","seconds","parseInt","isInteger","delay","Date","getTime","now"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nvar DEFAULT_TRACE_TIMEOUT = 10000;\nexport var DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport var DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport var DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport var DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(partialHeaders) {\n    if (partialHeaders === void 0) { partialHeaders = {}; }\n    var headers = {};\n    Object.entries(partialHeaders).forEach(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        if (typeof value !== 'undefined') {\n            headers[key] = String(value);\n        }\n        else {\n            diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n        }\n    });\n    return headers;\n}\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url, path) {\n    if (!url.endsWith('/')) {\n        url = url + '/';\n    }\n    return url + path;\n}\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url) {\n    try {\n        var parsedUrl = new URL(url);\n        if (parsedUrl.pathname === '') {\n            parsedUrl.pathname = parsedUrl.pathname + '/';\n        }\n        return parsedUrl.toString();\n    }\n    catch (_a) {\n        diag.warn(\"Could not parse export URL: '\" + url + \"'\");\n        return url;\n    }\n}\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(timeoutMillis) {\n    if (typeof timeoutMillis === 'number') {\n        if (timeoutMillis <= 0) {\n            // OTLP exporter configured timeout - using default value of 10000ms\n            return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n        }\n        return timeoutMillis;\n    }\n    else {\n        return getExporterTimeoutFromEnv();\n    }\n}\nfunction getExporterTimeoutFromEnv() {\n    var _a;\n    var definedTimeout = Number((_a = getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) !== null && _a !== void 0 ? _a : getEnv().OTEL_EXPORTER_OTLP_TIMEOUT);\n    if (definedTimeout <= 0) {\n        // OTLP exporter configured timeout - using default value of 10000ms\n        return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n    }\n    else {\n        return definedTimeout;\n    }\n}\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(timeout, defaultTimeout) {\n    diag.warn('Timeout must be greater than 0', timeout);\n    return defaultTimeout;\n}\nexport function isExportRetryable(statusCode) {\n    var retryCodes = [429, 502, 503, 504];\n    return retryCodes.includes(statusCode);\n}\nexport function parseRetryAfterToMills(retryAfter) {\n    if (retryAfter == null) {\n        return -1;\n    }\n    var seconds = Number.parseInt(retryAfter, 10);\n    if (Number.isInteger(seconds)) {\n        return seconds > 0 ? seconds * 1000 : -1;\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n    var delay = new Date(retryAfter).getTime() - Date.now();\n    if (delay >= 0) {\n        return delay;\n    }\n    return 0;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}