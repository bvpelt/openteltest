{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT\n    },\n    spanLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT\n    }\n  };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(environment) {\n  if (environment === void 0) {\n    environment = getEnv();\n  }\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler()\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler()\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment))\n      });\n    default:\n      diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n      return new AlwaysOnSampler();\n  }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n  if (environment.OTEL_TRACES_SAMPLER_ARG === undefined || environment.OTEL_TRACES_SAMPLER_ARG === '') {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n  if (isNaN(probability)) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  if (probability < 0 || probability > 1) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  return probability;\n}","map":{"version":3,"names":["diag","getEnv","TracesSamplerValues","AlwaysOffSampler","AlwaysOnSampler","ParentBasedSampler","TraceIdRatioBasedSampler","env","FALLBACK_OTEL_TRACES_SAMPLER","AlwaysOn","DEFAULT_RATIO","loadDefaultConfig","sampler","buildSamplerFromEnv","forceFlushTimeoutMillis","generalLimits","attributeValueLengthLimit","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","attributeCountLimit","OTEL_ATTRIBUTE_COUNT_LIMIT","spanLimits","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","linkCountLimit","OTEL_SPAN_LINK_COUNT_LIMIT","eventCountLimit","OTEL_SPAN_EVENT_COUNT_LIMIT","attributePerEventCountLimit","OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT","attributePerLinkCountLimit","OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT","environment","OTEL_TRACES_SAMPLER","AlwaysOff","ParentBasedAlwaysOn","root","ParentBasedAlwaysOff","TraceIdRatio","getSamplerProbabilityFromEnv","ParentBasedTraceIdRatio","error","OTEL_TRACES_SAMPLER_ARG","undefined","probability","Number","isNaN"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n    return {\n        sampler: buildSamplerFromEnv(env),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n            linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n            eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n            attributePerEventCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n            attributePerLinkCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n        },\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(environment) {\n    if (environment === void 0) { environment = getEnv(); }\n    switch (environment.OTEL_TRACES_SAMPLER) {\n        case TracesSamplerValues.AlwaysOn:\n            return new AlwaysOnSampler();\n        case TracesSamplerValues.AlwaysOff:\n            return new AlwaysOffSampler();\n        case TracesSamplerValues.ParentBasedAlwaysOn:\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n        case TracesSamplerValues.ParentBasedAlwaysOff:\n            return new ParentBasedSampler({\n                root: new AlwaysOffSampler(),\n            });\n        case TracesSamplerValues.TraceIdRatio:\n            return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n        case TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new ParentBasedSampler({\n                root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n            });\n        default:\n            diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n            return new AlwaysOnSampler();\n    }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        environment.OTEL_TRACES_SAMPLER_ARG === '') {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}