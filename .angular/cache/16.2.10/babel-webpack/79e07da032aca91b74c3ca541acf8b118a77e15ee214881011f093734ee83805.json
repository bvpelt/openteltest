{"ast":null,"code":"/**\n * Create a pseudorandom number generator, with a seed.\n * @param {array} seed \"128-bit\" integer, composed of 4x32-bit\n * integers in big endian order.\n */\nfunction XorShift(seed) {\n  // Note the extension, this === module.exports is required because\n  // the `constructor` function will be used to generate new instances.\n  // In that case `this` will point to the default RNG, and `this` will\n  // be an instance of XorShift.\n  if (!(this instanceof XorShift) || this === module.exports) {\n    return new XorShift(seed);\n  }\n  if (!Array.isArray(seed) || seed.length !== 4) {\n    throw new TypeError('seed must be an array with 4 numbers');\n  }\n\n  // uint64_t s = [seed ...]\n  this._state0U = seed[0] | 0;\n  this._state0L = seed[1] | 0;\n  this._state1U = seed[2] | 0;\n  this._state1L = seed[3] | 0;\n}\n\n/**\n * Returns a 64bit random number as a 2x32bit array\n * @return {array}\n */\nXorShift.prototype.randomint = function () {\n  // uint64_t s1 = s[0]\n  var s1U = this._state0U,\n    s1L = this._state0L;\n  // uint64_t s0 = s[1]\n  var s0U = this._state1U,\n    s0L = this._state1L;\n\n  // result = s0 + s1\n  var sumL = (s0L >>> 0) + (s1L >>> 0);\n  var resU = s0U + s1U + (sumL / 2 >>> 31) >>> 0;\n  var resL = sumL >>> 0;\n\n  // s[0] = s0\n  this._state0U = s0U;\n  this._state0L = s0L;\n\n  // - t1 = [0, 0]\n  var t1U = 0,\n    t1L = 0;\n  // - t2 = [0, 0]\n  var t2U = 0,\n    t2L = 0;\n\n  // s1 ^= s1 << 23;\n  // :: t1 = s1 << 23\n  var a1 = 23;\n  var m1 = 0xFFFFFFFF << 32 - a1;\n  t1U = s1U << a1 | (s1L & m1) >>> 32 - a1;\n  t1L = s1L << a1;\n  // :: s1 = s1 ^ t1\n  s1U = s1U ^ t1U;\n  s1L = s1L ^ t1L;\n\n  // t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )\n  // :: t1 = s1 ^ s0\n  t1U = s1U ^ s0U;\n  t1L = s1L ^ s0L;\n  // :: t2 = s1 >> 18\n  var a2 = 18;\n  var m2 = 0xFFFFFFFF >>> 32 - a2;\n  t2U = s1U >>> a2;\n  t2L = s1L >>> a2 | (s1U & m2) << 32 - a2;\n  // :: t1 = t1 ^ t2\n  t1U = t1U ^ t2U;\n  t1L = t1L ^ t2L;\n  // :: t2 = s0 >> 5\n  var a3 = 5;\n  var m3 = 0xFFFFFFFF >>> 32 - a3;\n  t2U = s0U >>> a3;\n  t2L = s0L >>> a3 | (s0U & m3) << 32 - a3;\n  // :: t1 = t1 ^ t2\n  t1U = t1U ^ t2U;\n  t1L = t1L ^ t2L;\n\n  // s[1] = t1\n  this._state1U = t1U;\n  this._state1L = t1L;\n\n  // return result\n  return [resU, resL];\n};\n\n/**\n * Returns a random number normalized [0, 1), just like Math.random()\n * @return {number}\n */\nXorShift.prototype.random = function () {\n  var t2 = this.randomint();\n  // Math.pow(2, -32) = 2.3283064365386963e-10\n  // Math.pow(2, -52) = 2.220446049250313e-16\n  return t2[0] * 2.3283064365386963e-10 + (t2[1] >>> 12) * 2.220446049250313e-16;\n};\n\n// Seed with Math.random() by default to prevent seed collision\nfunction getRandomSeed() {\n  return Math.random() * Math.pow(2, 32);\n}\nmodule.exports = new XorShift([getRandomSeed(), getRandomSeed(), getRandomSeed(), getRandomSeed()]);\n\n// Export constructor under its own name so that consumers using ES2015\n// can write `import { XorShift } from 'xorshift'`.\nmodule.exports.XorShift = XorShift;","map":{"version":3,"names":["XorShift","seed","module","exports","Array","isArray","length","TypeError","_state0U","_state0L","_state1U","_state1L","prototype","randomint","s1U","s1L","s0U","s0L","sumL","resU","resL","t1U","t1L","t2U","t2L","a1","m1","a2","m2","a3","m3","random","t2","getRandomSeed","Math","pow"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/xorshift/xorshift.js"],"sourcesContent":["\n/**\n * Create a pseudorandom number generator, with a seed.\n * @param {array} seed \"128-bit\" integer, composed of 4x32-bit\n * integers in big endian order.\n */\nfunction XorShift(seed) {\n  // Note the extension, this === module.exports is required because\n  // the `constructor` function will be used to generate new instances.\n  // In that case `this` will point to the default RNG, and `this` will\n  // be an instance of XorShift.\n  if (!(this instanceof XorShift) || this === module.exports) {\n    return new XorShift(seed);\n  }\n\n  if (!Array.isArray(seed) || seed.length !== 4) {\n    throw new TypeError('seed must be an array with 4 numbers');\n  }\n\n  // uint64_t s = [seed ...]\n  this._state0U = seed[0] | 0;\n  this._state0L = seed[1] | 0;\n  this._state1U = seed[2] | 0;\n  this._state1L = seed[3] | 0;\n}\n\n/**\n * Returns a 64bit random number as a 2x32bit array\n * @return {array}\n */\nXorShift.prototype.randomint = function() {\n  // uint64_t s1 = s[0]\n  var s1U = this._state0U, s1L = this._state0L;\n  // uint64_t s0 = s[1]\n  var s0U = this._state1U, s0L = this._state1L;\n\n  // result = s0 + s1\n  var sumL = (s0L >>> 0) + (s1L >>> 0);\n  var resU = (s0U + s1U + (sumL / 2 >>> 31)) >>> 0;\n  var resL = sumL >>> 0;\n\n  // s[0] = s0\n  this._state0U = s0U;\n  this._state0L = s0L;\n\n  // - t1 = [0, 0]\n  var t1U = 0, t1L = 0;\n  // - t2 = [0, 0]\n  var t2U = 0, t2L = 0;\n\n  // s1 ^= s1 << 23;\n  // :: t1 = s1 << 23\n  var a1 = 23;\n  var m1 = 0xFFFFFFFF << (32 - a1);\n  t1U = (s1U << a1) | ((s1L & m1) >>> (32 - a1));\n  t1L = s1L << a1;\n  // :: s1 = s1 ^ t1\n  s1U = s1U ^ t1U;\n  s1L = s1L ^ t1L;\n\n  // t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )\n  // :: t1 = s1 ^ s0\n  t1U = s1U ^ s0U;\n  t1L = s1L ^ s0L;\n  // :: t2 = s1 >> 18\n  var a2 = 18;\n  var m2 = 0xFFFFFFFF >>> (32 - a2);\n  t2U = s1U >>> a2;\n  t2L = (s1L >>> a2) | ((s1U & m2) << (32 - a2));\n  // :: t1 = t1 ^ t2\n  t1U = t1U ^ t2U;\n  t1L = t1L ^ t2L;\n  // :: t2 = s0 >> 5\n  var a3 = 5;\n  var m3 = 0xFFFFFFFF >>> (32 - a3);\n  t2U = s0U >>> a3;\n  t2L = (s0L >>> a3) | ((s0U & m3) << (32 - a3));\n  // :: t1 = t1 ^ t2\n  t1U = t1U ^ t2U;\n  t1L = t1L ^ t2L;\n\n  // s[1] = t1\n  this._state1U = t1U;\n  this._state1L = t1L;\n\n  // return result\n  return [resU, resL];\n};\n\n/**\n * Returns a random number normalized [0, 1), just like Math.random()\n * @return {number}\n */\nXorShift.prototype.random = function() {\n  var t2 = this.randomint();\n  // Math.pow(2, -32) = 2.3283064365386963e-10\n  // Math.pow(2, -52) = 2.220446049250313e-16\n  return t2[0] * 2.3283064365386963e-10 + (t2[1] >>> 12) * 2.220446049250313e-16;\n};\n\n// Seed with Math.random() by default to prevent seed collision\nfunction getRandomSeed() {\n    return Math.random() * Math.pow(2, 32);\n}\nmodule.exports = new XorShift([\n  getRandomSeed(),\n  getRandomSeed(),\n  getRandomSeed(),\n  getRandomSeed()\n]);\n\n// Export constructor under its own name so that consumers using ES2015\n// can write `import { XorShift } from 'xorshift'`.\nmodule.exports.XorShift = XorShift;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}