{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The functions and constants in this file allow us to interact\n * with the internal representation of an IEEE 64-bit floating point\n * number. We need to work with all 64-bits, thus, care needs to be\n * taken when working with Javascript's bitwise operators (<<, >>, &,\n * |, etc) as they truncate operands to 32-bits. In order to work around\n * this we work with the 64-bits as two 32-bit halves, perform bitwise\n * operations on them independently, and combine the results (if needed).\n */\nexport var SIGNIFICAND_WIDTH = 52;\n/**\n * EXPONENT_MASK is set to 1 for the hi 32-bits of an IEEE 754\n * floating point exponent: 0x7ff00000.\n */\nvar EXPONENT_MASK = 0x7ff00000;\n/**\n * SIGNIFICAND_MASK is the mask for the significand portion of the hi 32-bits\n * of an IEEE 754 double-precision floating-point value: 0xfffff\n */\nvar SIGNIFICAND_MASK = 0xfffff;\n/**\n * EXPONENT_BIAS is the exponent bias specified for encoding\n * the IEEE 754 double-precision floating point exponent: 1023\n */\nvar EXPONENT_BIAS = 1023;\n/**\n * MIN_NORMAL_EXPONENT is the minimum exponent of a normalized\n * floating point: -1022.\n */\nexport var MIN_NORMAL_EXPONENT = -EXPONENT_BIAS + 1;\n/**\n * MAX_NORMAL_EXPONENT is the maximum exponent of a normalized\n * floating point: 1023.\n */\nexport var MAX_NORMAL_EXPONENT = EXPONENT_BIAS;\n/**\n * MIN_VALUE is the smallest normal number\n */\nexport var MIN_VALUE = Math.pow(2, -1022);\n/**\n * getNormalBase2 extracts the normalized base-2 fractional exponent.\n * This returns k for the equation f x 2**k where f is\n * in the range [1, 2).  Note that this function is not called for\n * subnormal numbers.\n * @param {number} value - the value to determine normalized base-2 fractional\n *    exponent for\n * @returns {number} the normalized base-2 exponent\n */\nexport function getNormalBase2(value) {\n  var dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as 32-bit uints\n  var hiBits = dv.getUint32(0);\n  var expBits = (hiBits & EXPONENT_MASK) >> 20;\n  return expBits - EXPONENT_BIAS;\n}\n/**\n * GetSignificand returns the 52 bit (unsigned) significand as a signed value.\n * @param {number} value - the floating point number to extract the significand from\n * @returns {number} The 52-bit significand\n */\nexport function getSignificand(value) {\n  var dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as two 32-bit uints\n  var hiBits = dv.getUint32(0);\n  var loBits = dv.getUint32(4);\n  // extract the significand bits from the hi bits and left shift 32 places note:\n  // we can't use the native << operator as it will truncate the result to 32-bits\n  var significandHiBits = (hiBits & SIGNIFICAND_MASK) * Math.pow(2, 32);\n  // combine the hi and lo bits and return\n  return significandHiBits + loBits;\n}","map":{"version":3,"names":["SIGNIFICAND_WIDTH","EXPONENT_MASK","SIGNIFICAND_MASK","EXPONENT_BIAS","MIN_NORMAL_EXPONENT","MAX_NORMAL_EXPONENT","MIN_VALUE","Math","pow","getNormalBase2","value","dv","DataView","ArrayBuffer","setFloat64","hiBits","getUint32","expBits","getSignificand","loBits","significandHiBits"],"sources":["/home/bvpelt/Develop/openteltest/node_modules/@opentelemetry/sdk-metrics/build/esm/aggregator/exponential-histogram/mapping/ieee754.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The functions and constants in this file allow us to interact\n * with the internal representation of an IEEE 64-bit floating point\n * number. We need to work with all 64-bits, thus, care needs to be\n * taken when working with Javascript's bitwise operators (<<, >>, &,\n * |, etc) as they truncate operands to 32-bits. In order to work around\n * this we work with the 64-bits as two 32-bit halves, perform bitwise\n * operations on them independently, and combine the results (if needed).\n */\nexport var SIGNIFICAND_WIDTH = 52;\n/**\n * EXPONENT_MASK is set to 1 for the hi 32-bits of an IEEE 754\n * floating point exponent: 0x7ff00000.\n */\nvar EXPONENT_MASK = 0x7ff00000;\n/**\n * SIGNIFICAND_MASK is the mask for the significand portion of the hi 32-bits\n * of an IEEE 754 double-precision floating-point value: 0xfffff\n */\nvar SIGNIFICAND_MASK = 0xfffff;\n/**\n * EXPONENT_BIAS is the exponent bias specified for encoding\n * the IEEE 754 double-precision floating point exponent: 1023\n */\nvar EXPONENT_BIAS = 1023;\n/**\n * MIN_NORMAL_EXPONENT is the minimum exponent of a normalized\n * floating point: -1022.\n */\nexport var MIN_NORMAL_EXPONENT = -EXPONENT_BIAS + 1;\n/**\n * MAX_NORMAL_EXPONENT is the maximum exponent of a normalized\n * floating point: 1023.\n */\nexport var MAX_NORMAL_EXPONENT = EXPONENT_BIAS;\n/**\n * MIN_VALUE is the smallest normal number\n */\nexport var MIN_VALUE = Math.pow(2, -1022);\n/**\n * getNormalBase2 extracts the normalized base-2 fractional exponent.\n * This returns k for the equation f x 2**k where f is\n * in the range [1, 2).  Note that this function is not called for\n * subnormal numbers.\n * @param {number} value - the value to determine normalized base-2 fractional\n *    exponent for\n * @returns {number} the normalized base-2 exponent\n */\nexport function getNormalBase2(value) {\n    var dv = new DataView(new ArrayBuffer(8));\n    dv.setFloat64(0, value);\n    // access the raw 64-bit float as 32-bit uints\n    var hiBits = dv.getUint32(0);\n    var expBits = (hiBits & EXPONENT_MASK) >> 20;\n    return expBits - EXPONENT_BIAS;\n}\n/**\n * GetSignificand returns the 52 bit (unsigned) significand as a signed value.\n * @param {number} value - the floating point number to extract the significand from\n * @returns {number} The 52-bit significand\n */\nexport function getSignificand(value) {\n    var dv = new DataView(new ArrayBuffer(8));\n    dv.setFloat64(0, value);\n    // access the raw 64-bit float as two 32-bit uints\n    var hiBits = dv.getUint32(0);\n    var loBits = dv.getUint32(4);\n    // extract the significand bits from the hi bits and left shift 32 places note:\n    // we can't use the native << operator as it will truncate the result to 32-bits\n    var significandHiBits = (hiBits & SIGNIFICAND_MASK) * Math.pow(2, 32);\n    // combine the hi and lo bits and return\n    return significandHiBits + loBits;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,iBAAiB,GAAG,EAAE;AACjC;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,UAAU;AAC9B;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,OAAO;AAC9B;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,IAAI;AACxB;AACA;AACA;AACA;AACA,OAAO,IAAIC,mBAAmB,GAAG,CAACD,aAAa,GAAG,CAAC;AACnD;AACA;AACA;AACA;AACA,OAAO,IAAIE,mBAAmB,GAAGF,aAAa;AAC9C;AACA;AACA;AACA,OAAO,IAAIG,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAE;EAClC,IAAIC,EAAE,GAAG,IAAIC,QAAQ,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC;EACzCF,EAAE,CAACG,UAAU,CAAC,CAAC,EAAEJ,KAAK,CAAC;EACvB;EACA,IAAIK,MAAM,GAAGJ,EAAE,CAACK,SAAS,CAAC,CAAC,CAAC;EAC5B,IAAIC,OAAO,GAAG,CAACF,MAAM,GAAGd,aAAa,KAAK,EAAE;EAC5C,OAAOgB,OAAO,GAAGd,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,cAAcA,CAACR,KAAK,EAAE;EAClC,IAAIC,EAAE,GAAG,IAAIC,QAAQ,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC;EACzCF,EAAE,CAACG,UAAU,CAAC,CAAC,EAAEJ,KAAK,CAAC;EACvB;EACA,IAAIK,MAAM,GAAGJ,EAAE,CAACK,SAAS,CAAC,CAAC,CAAC;EAC5B,IAAIG,MAAM,GAAGR,EAAE,CAACK,SAAS,CAAC,CAAC,CAAC;EAC5B;EACA;EACA,IAAII,iBAAiB,GAAG,CAACL,MAAM,GAAGb,gBAAgB,IAAIK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;EACrE;EACA,OAAOY,iBAAiB,GAAGD,MAAM;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}